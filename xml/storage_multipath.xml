<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-multipath" xml:lang="en">
 <title>Managing Multipath I/O for Devices</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  This section describes how to manage failover and path load balancing for
  multiple paths between the servers and block storage devices by using
  Multipath I/O (MPIO).
 </para>
 <sect1 xml:id="sec-multipath-intro">
  <title>Understanding Multipath I/O</title>

  <para>
   Multipathing is the ability of a server to communicate with the same
   physical or logical block storage device across multiple physical paths
   between the host bus adapters in the server and the storage controllers for
   the device, typically in Fibre Channel (FC) or iSCSI SAN environments.
  </para>

  <para>
   Linux multipathing provides connection fault tolerance and can provide load
   balancing across the active connections. When multipathing is configured and
   running, it automatically isolates and identifies device connection
   failures, and reroutes I/O to alternate connections.
  </para>

  <para>
    Multipathing provides fault tolerance
    against connection failures, but not against failures of the storage device
    itself. The latter is achieved with complementary techniques
    like mirroring.
  </para>

  <sect2>
    <title>Multipath terminology</title>
    <variablelist>
      <varlistentry>
	<term>
	  Storage array
	</term>
	<listitem>
	  <para>
	    A hardware device with many disks and multiple
	    fabrics connections (controllers) that provides SAN or NAS storage
	    to clients. Storage arrays typically have RAID and failover
	    features and support multipathing. Historically,
	    active/passive (failover) and active/active
	    (load-balancing) storage array configurations were
	    distinguished. These concepts still exist but they are merely
	    special cases of the concepts of path groups and access
	    states supported by modern hardware.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  Host, host system
	</term>
	<listitem>
	  <para>
	    The computer running &productname; which acts as a client system
	    for a <emphasis>storage array</emphasis>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  Multipath map, multipath device
	</term>
	<listitem>
	  <para>
	  A set of <emphasis>path devices</emphasis>. It represents a
	  storage volume on a storage array and is seen as a
	  a single block device by the host system.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  Path device, low-level device
	</term>
	<listitem>
	  <para>
	    A member of a multipath map, typically a SCSI device.
	    Each path device represents a unique
	    connection between the host computer and the actual storage
	    volume, for example a logical unit from an iSCSI session.
	    Under Linux device-mapper multipath, path devices remain visible
	    and accessible in the host system.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  WWID, UID, UUID
	</term>
	<listitem>
	  <para>
	    &ldquo;World Wide Identifier&rdquo;, &ldquo;Unique
	    Identifier&rdquo; &ldquo;Universally Unique Identifier&rdquo;.
	    The WWID is a property
	    of the storage volume and as such, identical between all path
	    devices of a multipath map. multipath-tools uses the WWID to
	    determine which low-level devices should be assembled into a
	    multipath map. multipath relies on <command>udev</command> to
	    determine the WWID of path devices. The WWID of a multipath map never
	    changes. multipath devices can be reliably accessed through
	    <filename>/dev/disk/by-id/dm-uuid-mpath-<replaceable>WWID</replaceable></filename>.
	  </para>
	  <para>
	    The WWID should be distinguished from the <emphasis>map
	    name</emphasis>, which is configurable (see
	    <xref linkend="sec-multipath-names" xrefstyle="SectTitleOnPage"/>).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  uevent, udev event
	</term>
	<listitem>
	  <para>
	    An event sent by the kernel to user space and processed by the
	    <command>udev</command> subsytem. Uevents are generated when
	    devices are added, removed, or change properties.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  Device mapper
	</term>
	<listitem>
	  <para>
	    A framework in the Linux kernel for creating virtual block
	    devices. I/O operations to mapped devices are redirected to
	    underlying block devices. Device mappings
	    may be stacked. Device mapper implements its own event signalling,
	    so called &ldquo;device mapper events&rdquo;
	    or &ldquo;dm events&rdquo;.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
 </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-hardware">
  <title>Hardware Support</title>

  <para>
   The multipathing drivers and tools are available on all architectures
   supported by &productname;. The generic, protocol-agnostic driver
   works with most multipath-capable storage hardware on the market.
   Some storage array vendors provide their
   own multipathing management tools. Consult the vendorâ€™s
   hardware documentation to determine what settings are required.
  </para>

  <sect2 xml:id="sec-multipath-hardware-implementations">
    <title>Multipath implementations: device-mapper and NVMe</title>

    <para>
      The traditional, generic implementation of multipathing
      under Linux uses the device mapper framework. For most
      device types like SCSI devices, device mapper multipathing is
      the only available implementation. Device mapper multipathing is highly
      configurable and flexible.
    </para>
    <para>
      The Linux <emphasis>NVM Express</emphasis> (NVMe) kernel subsystem implements
      multipathing natively in the kernel. This implementation creates less
      computational overhead for NVMe devices, which are typically fast
      devices with very low latencies. Native NVMe multipathing requires no
      user-space component. Since &slea; 15, native multipathing is
      the default for NVMe multipath devices.
    </para>
    <para>
      The rest of this chapter is about device-mapper multipath.
    </para>
  </sect2>

  <sect2 xml:id="sec-multipath-hardware-autodetect">
    <title>Storage array autodetection for multipathing</title>
    <para>
      Device-mapper multipath is a generic technology. Multipath device
      detection requires only that the low-level (e.g. SCSI) devices
      are detected by the kernel, and that device properties reliably
      identify multiple low-level devices as being different
      &ldquo;paths&rdquo; to the same volume rather than actually different
      devices.
    </para>
    <para>
      The <filename>multipath-tools</filename> package detects storage arrays
      by their vendor and product names. It has validated built-in configuration
      defaults for a large variety of storage products. Consult the hardware
      documentation of your storage array; some vendors provide
      specific recommendations for Linux multipathing configuration.
      To see the built-in
      settings for storage that has been detected on your system, run the
      command <command>multipath -T</command>, see
      <xref linkend="sec-multipath-mpiotools-multipath" xrefstyle="SectTitleOnPage"/>.
    </para>
   <para>
    If you need to apply changes to the built-in configuration for your
    storage array, create and configure the
    <filename>/etc/multipath.conf</filename> file. See
    <xref linkend="sec-multipath-conf-file" xrefstyle="SectTitleOnPage"/>.
   </para>
   <important>
     <title>Disclaimer about built-in presets</title>
     <para>
       <filename>multipath-tools</filename> has built-in presets for many
       storage arrays.
       The existence of such presets for a given storage product
       <emphasis>does not imply</emphasis>
       that a the vendor of the storage product has tested the product with
       <systemitem>dm-multipath</systemitem>, nor that the vendor endorses
       or supports use of <systemitem>dm-multipath</systemitem> with the
       product. Always consult the original vendor documentation for
       support-related questions.
     </para>
   </important>
  </sect2>

  <sect2 xml:id="sec-multipath-hardware-handlers">
   <title>Storage Arrays that Require Specific Hardware Handlers</title>
   <para>
    Some storage arrays require special commands for failover from one
    path to the other, or non-standard error handling methods.
    These special commands and methods are implemented by hardware handlers in the Linux kernel.
    Modern SCSI storage arrays support the &ldquo;Asymmetric Logical Unit
    Access&rdquo; (ALUA) hardware handler defined in the SCSI standard.
    Besides ALUA, the &slea; kernel contains hardware handlers for Netapp
    E-Series (RDAC), the Dell/EMC CLARiiON CX family of arrays, and 
    legacy arrays from HP. Since Linux kernel 4.4, the Linux kernel
    automatically detects hardware handlers for most arrays, including all
    arrays supporting ALUA.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-planning">
  <title>Planning for Multipathing</title>

  <para>
   Use the guidelines in this section when planning your multipath I/O
   solution.
  </para>

  <sect2 xml:id="sec-multipath-planning-prereq">
   <title>Prerequisites</title>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The storage array you use for the multipathed device must support
      multipathing. For more information, see
      <xref linkend="sec-multipath-hardware" xrefstyle="SectTitleOnPage"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      You need to configure multipathing only if multiple physical paths exist
      between host bus adapters in the server and host bus controllers for the
      block storage device.
     </para>
    </listitem>
    <listitem>
     <para>
      For some storage arrays, the vendor provides its own multipathing
      software to manage multipathing for the arrayâ€™s physical and logical
      devices. In this case, you should follow the vendorâ€™s instructions for
      configuring multipathing for those devices.
     </para>
    </listitem>
    <listitem>
     <para>
      When using multipathing in a virtualization environment, the multipathing
      is controlled in the host server environment. Configure multipathing for
      the device before you assign it to a virtual guest machine.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-multipath-planning-types">
    <title>Multipath installation types</title>
    <sect3 xml:id="sec-multipath-planning-type-root">
      <title>Root file system on multipath (SAN-boot)</title>
      <para>
	The root file system is on a multipathed device (usually,
	all other file systems are on multipathed storage as well).
	This is typically the case for
	diskless servers that use SAN or NAS storage exclusively. On such
	systems, multipath support is required for booting, and multipathing
	must be enabled in the initramfs (initrd).
	See <xref linkend="sec-multipath-initrd-sync" xrefstyle="SectTitleOnPage"/>.
      </para>
    </sect3>
    <sect3 xml:id="sec-multipath-planning-type-noroot">
      <title>Root file system on a local disk</title>
      <para>
	The root file system (and possibly some other file systems) are on local
	storage, for example, on a directly attached SATA disk or local RAID,
	but the system additionally uses filesystems on multipathed SAN or NAS
	storage. This system type can be configured in three different ways:
      </para>
      <variablelist>
      <varlistentry>
      <term>Using a root-on-multipath setup</term>
      
	<listitem>
	  <para>
	  
	  All block devices are part of multipath maps, including the local disk,
	  Such a setup then appears as a degraded multipath map with just one path.
	  This configuration is created if multipathing was enabled during
	  initial system installation with &yast;.
	  It is the simplest configuration, but has a performance
	  overhead.
	  </para>
	</listitem>
	</varlistentry>
	<varlistentry>
	<term>Ignoring the local disk by <systemitem>multipath-tools</systemitem> </term>
	<listitem>
	  <para>
	    In this configuration multipathing is enabled in the initramfs.
	    
	    This configuration can be achieved after installation by blacklisting, or with the
	    <literal>find_multipaths</literal> configuration parameter.
	  </para>
	</listitem>
	</varlistentry>
	<varlistentry xml:id="vl-multipath-planning-type-noroot-noinitrd">
	<term>Disabling multipathing in the initramfs.</term>
	<listitem>
	  <para>
	  This setup is created if
	  multipathing was not enabled during initial system installation with
	  &yast;, either because &yast; didn't detect multipath devices or
	  because the user opted against enabling multipath during installation.
	  This is the only situation in which
	  <xref linkend="sec-multipath-initrd-sync"
		xrefstyle="SectTitleOnPage"/> doesn't apply.
	  </para>
	</listitem>
      </varlistentry>
      </variablelist>
      <para>
	
	
      </para>
    </sect3>
  </sect2>
  <sect2 xml:id="sec-multipath-planning-disks">
   <title>Disk Management Tasks</title>
   <para>
     Use third-party SAN array management tools or your storage array's user
     interface to create logical devices and assign them to hosts. Make sure
     to configure the host credentials correctly on both sides.
   </para>
   <para>
     You can add or remove volumes to a running host, but detecting
     the changes may require rescanning SCSI targets and reconfiguring
     multipathing on the host.
   </para>
   <para>
    If a disk array has more than one storage processor, ensure that the SAN
    switch has a connection to the storage processor that owns the LUNs you
    want to access. On most disk arrays, all LUNs belong to both storage
    processors, so both connections are active.
   </para>
   <note>
    <title>Storage processors</title>
    <para>
     On some disk arrays, the storage array manages the traffic through storage
     processors so that it presents only one storage processor at a time. One
     processor is active and the other one is passive until there is a failure.
     If you are connected to the wrong storage processor (the one with the
     passive path) you might not see the expected LUNs, or you might see the
     LUNs but get errors when you try to access them.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="sec-multipath-planning-raid">
    <title>Software RAID and complex storage stacks</title>
    <para>
      Multipathing is set up on top of basic storage devices such as
      SCSI disks. In a multi-layered storage stack, multipathing is always the
      bottom layer. Other layers such as software RAID, Logical Volume
      Management, block device encryption, etc. are layered on top of it.
  
   
    
    Therefore, for each device that has multiple I/O paths and that you plan to use in a
    software RAID, you must configure the device for multipathing before you
    attempt to create the software RAID device.
   </para>
   <para>
    For information about setting up multipathing for existing software RAIDs,
    see <xref linkend="sec-multipath-raid" xrefstyle="SectTitleOnPage"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-planning-ha">
   <title>High-Availability Solutions</title>
   <para>
    High-availability solutions for clustering storage resources run on top of
    the multipathing service on each node. Make sure that the configuration
    settings in the <filename>/etc/multipath.conf</filename> file on each node
    are consistent across the cluster.
   </para>
   <para>
    Make sure that multipath devices have the same name across all devices.
    Refer to <xref linkend="sec-multipath-names-ha"/> for details.
   </para>
   <para>
    The Distributed Replicated Block Device (DRBD) high-availability solution
    for mirroring devices across a LAN runs on top of multipathing. For each
    device that has multiple I/O paths and that you plan to use in a DRDB
    solution, you must configure the device for multipathing before you
    configure DRBD.
   </para>
   <para>
     Special care must be taken when using multipathing together with
     clustering software that relies on shared storage for fencing, such as
     <command>pacemaker</command> with <command>sbd</command>.
     See <xref linkend="sec-multipath-policies-default"/> for details.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-mpiotools">
  <title>Multipath Management Tools</title>

  <para>
   The multipathing support in &productname; is based on the Device Mapper
   Multipath module of the Linux kernel and the
   <systemitem>multipath-tools</systemitem> user space package.
  </para>

  <sect2 xml:id="sec-multipath-mpiotools-dm">
   <title>Device Mapper Multipath Module</title>
   <para>
    The Device Mapper Multipath (DM-MP) module
    <filename>dm-multipath.ko</filename>
    provides the generic multipathing
    capability for Linux. DM-MPIO is the preferred solution for multipathing on
    &productname; for SCSI and DASD devices, and can be used for NVMe devices
    as well.
   </para>
   <note>
     <title>Using DM-MP for NVMe devices</title>
     <para>
       Since &productname; 15, native NVMe multipathing
       (see <xref linkend="sec-multipath-hardware-implementations"/>)
       is recommended for NVMe and used by default.
       To disable native NVMe multipathing and use device mapper multipath
       instead (<emphasis>not recommended</emphasis>), boot with the kernel parameter
       <literal>nvme-core.multipath=0</literal>.
     </para>
   </note>
   <para>
     The Device Mapper Multipath module handles the following
     tasks:
   </para>
   <itemizedlist>
     <listitem>
       <para>
	 Distributing load over multiple paths inside a path group according
	 to a <emphasis>path selection algorithm</emphasis>, e.g. round-robin.
       </para>
     </listitem>
     <listitem>
       <para>
	 Noticing I/O errors on path devices, and marking these devices as
	 failed, so that the path selection algorithm will skip them.
       </para>
     </listitem>
     <listitem>
       <para>
	 Switching path groups when all paths in the active path group have
	 failed. For some SCSI devices, this process may involve <emphasis>device
	 activation</emphasis> to switch path state from passive to active.
       </para>
     </listitem>
     <listitem>
       <para>
	 Either failing or queuing I/O on the multipath device if all paths
	 have failed, depending on configuration.
       </para>
     </listitem>
   </itemizedlist>
   <para>
     The Device Mapper Multipath module does <emphasis role="bold">not</emphasis> handle the following tasks:
   </para>
   <itemizedlist>
     <listitem>
       <para>
	 Discovering devices representing different paths to
	 the same storage device, and assembling multipath maps from them,
       </para>
     </listitem>
     <listitem>
       <para>
	 Collecting path devices with similar properties into path groups.
       </para>
     </listitem>
     <listitem>
       <para>
	 Active monitoring path devices for failure or reinstantiation.
       </para>
     </listitem>
     <listitem>
       <para>
	 Monitoring of additions and removals of path devices.
       </para>
     </listitem>
     <listitem>
       <para>
	 The Device Mapper Multipath module does not provide an easy-to-use user interface for setup and configuration.
       </para>
     </listitem>
   </itemizedlist>
   <para>
     The above-mentioned tasks are handled by the user space components
     in the <systemitem>multipath-tools</systemitem> package, <command>multipathd</command> in particular.
      For details, refer to <xref linkend="sec-multipath-mpiotools-multipathd"/>.
     <systemitem>multipath-tools</systemitem>
     features automatic configuration of the multipathing subsystem for
     a large variety of setups.
   </para>
   <note>
     <title>
      Failures that multipath prevents
     </title>
     <para>
       DM-MPIO protects against failures in the paths to the device, and not
       failures in the device itself, such as media errors. The latter
       kind of errors must be prevented by other means, such as replication.
     </para>
   </note>
  </sect2>

  <sect2 xml:id="sec-multipath-mpiotools-io-management">
   <title>Multipath I/O Management Tools</title>
   <para>
    The packages <systemitem class="resource">multipath-tools</systemitem> and
    <systemitem class="resource">kpartx</systemitem> provide tools that take
    care of automatic path discovery and grouping.
   </para>
   <variablelist>
     <varlistentry>
       <term>
	 <command>multipathd</command>
       </term>
       <listitem>
	 <para>
	   A daemon to set up and monitor multipath maps, and a command line
	   client to communicate with the daemon process. See
	   <xref linkend="sec-multipath-mpiotools-multipathd" xrefstyle="SectTitleOnPage"/>.
	 </para>
       </listitem>
     </varlistentry>
     <varlistentry>
       <term>
	 <command>multipath</command>
       </term>
       <listitem>
	 <para>
	   Command line tool for multipath operations. See
	   <xref linkend="sec-multipath-mpiotools-multipath" xrefstyle="SectTitleOnPage"/>.
	 </para>
       </listitem>
     </varlistentry>
     <varlistentry>
       <term>
	 <command>kpartx</command>
       </term>
       <listitem>
	 <para>
	   Command line tool for managing &ldquo;partitions&rdquo; on multipath
	   devices. See
	   <xref linkend="sec-multipath-configuration-partitioning" xrefstyle="SectTitleOnPage"/>.
	 </para>
       </listitem>
     </varlistentry>
     <varlistentry>
       <term>
	 <command>mpathpersist</command>
       </term>
       <listitem>
	 <para>
	   Command line tool for managing SCSI persistent reservations. See 
	   <xref linkend="sec-multipath-mpiotools-mpathpersist" xrefstyle="SectTitleOnPage"/>.
	 </para>
       </listitem>
     </varlistentry>
     <varlistentry>
       <term>
       </term>
       <listitem>
	 <para>
	 </para>
       </listitem>
     </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-multipath-mpiotools-mdadm">
   <title>MD RAID on multipathed devices</title>
   <para>
     MD RAID arrays on top of multipathing
     are set up automatically by the system's udev rules. No special
     configuration in <filename>/etc/mdadm.conf</filename> is necessary.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-mpiotools-multipathd">
    <title>The <command>multipathd</command> daemon and the <command>multipath</command> command</title>
    <para>
      <command>multipathd</command> is the most important part of a modern
      Linux device-mapper multipath setup. It is normally started through the
      systemd service <filename>multipathd.service</filename>. Socket activation
      via <filename>multipathd.socket</filename> is supported, but it's
      <emphasis>strongly recommended</emphasis> to enable
      <filename>multipathd.service</filename> on systems with multipath hardware.
    </para>
    <para>
      <command>multipathd</command> serves the following tasks (some of them
      depend on the configuration):
    </para>
      <itemizedlist>
	<listitem>
	  <para>
	    On startup, detects path devices and sets up multipath maps from
	    detected devices.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Monitors uevents and device mapper events, adding or removing path
	    mappings to multipath maps as necessary, and initiating failover or
	    failback operations.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Sets up new maps on the fly when new path devices are discovered.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Checks path devices in regular intervals to detect failure, and
	    tests failed paths to reinstate them if they become operational
	    again.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    When all paths fail, <command>multipathd</command> either fails the map, or switches the map
	    device to queuing mode for a given time interval.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Handle path state changes and switch path groups or regroup paths
	    as necessary.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Tests paths for &ldquo;marginal&rdquo; state, i.e. shaky fabrics
	    conditions that cause path state flipping between operational and
	    non-operational.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Handle SCSI persistent reservation keys for path devices if configured. See
	    <xref linkend="sec-multipath-mpiotools-mpathpersist" xrefstyle="SectTitleOnPage"/>.
	  </para>
	</listitem>
      </itemizedlist>
    
    <para>
      <command>multipathd</command> also serves as a command line
      client to process interactive commands by sending them to the running
      daemon. The general syntax to send commands to the daemon is as follows:
      </para>
      <screen>multipathd <replaceable>COMMAND</replaceable></screen>
      <para>
      or
      </para>
      <screen>multipathd -k"<replaceable>COMMAND</replaceable>"</screen>
     <para>
       To enter the interactive mode with the daemon, run:
      </para>
      <screen>multipathd -k</screen>
      <note>
	<title>How multipath and multipathd work together</title>
	<para>
	  Many <command>multipathd</command> commands have
	  <command>multipath</command> equivalents. For example,
	  <command>multipathd show topology</command> does basically the same
	  thing as <command>multipath -ll</command>. The notable difference is
	  that the multipathd command inquires the internal state of the running
	  <command>multipathd</command> daemon, whereas multipath obtains
	  information directly from the kernel and I/O operations.
	</para>
	<para>
	  If the multipath daemon is running, it's recommended to make
	  modifications to the system by using the
	  <command>multipathd</command> commands. Otherwise, the daemon may
	  notice configuration changes and react to them. In some situations,
	  the daemon might even try to undo the applied changes. Therefore,
	  <command>multipath</command>
	  automatically delegates certain possibly dangerous commands, like
	  destroying and flushing maps, to <command>multipathd</command> if
	  a running daemon is detected.
	</para>
      </note>
   <para>The list bellow describes frequently used  <command>multipathd</command> commands</para>
   <variablelist>
    <varlistentry>
     <term>show topology</term>
     <listitem>
      <para>
	Shows the current map topology and properties.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>show paths</term>
     <listitem>
      <para>
	Shows the currently known path devices.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>show paths format "<replaceable>FORMAT STRING</replaceable>"</term>
     <listitem>
      <para>
	Shows the currently known path devices using a format string. Use
	<command>show wildcards</command> to see a list of supported format specifiers.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>show maps</term>
     <listitem>
      <para>
	Shows the currently configured map devices.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>show maps format <replaceable>FORMAT STRING</replaceable></term>
     <listitem>
      <para>
	Shows the currently configured map devices using a format string. Use
	<command>show wildcards</command> to see a list of supported format specifiers.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>show config local</term>
     <listitem>
      <para>
	Shows the current configuration that multipathd is using.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>reconfigure</term>
     <listitem>
      <para>
	Reread configuration files, rescan devices, and set up maps
	again. This is basically equivalent to a restart of
	<command>multipathd</command>. A few options can't be modified
	without a restart, they are mentioned in the man page
	<systemitem>multipath.conf(5)</systemitem>. The
	<option>reconfigure</option> command reloads only map devices that
	have changed in some way. To force reloading every map device, use
	<command>reconfigure all</command>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>del map <replaceable>MAP DEVICE NAME</replaceable></term>
     <listitem>
      <para>
	Unconfigure and delete the given map device and its partitions.
	<replaceable>MAP DEVICE NAME</replaceable> can be a device node name like
	<filename>dm-0</filename>, a WWID, or a map name. The command fails if
	the device is in use.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>switchgroup map <replaceable>MAP DEVICE NAME</replaceable> group <replaceable>N</replaceable></term>
     <listitem>
      <para>
	Switch to the path group with the given numeric index (starting at 1).
	This is useful for maps with manual failback
	(see <xref linkend="sec-multipath-policies-default" xrefstyle="SectTitleOnPage"/>).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
     Additional commands are available to modify path states, enable or disable
     queueing, and more. See <systemitem>multipathd(8)</systemitem> for
     details.
   </para>
  </sect2>
  <sect2 xml:id="sec-multipath-mpiotools-multipath">
   <title>The multipath Command</title>
   <para>
     Even though multipath setup is mostly automatic and
     handled by <command>multipathd</command>, <command>multipath</command> is still
     useful for some administration tasks. Several examples of the command usage follows:
   </para>
   <variablelist>
    <varlistentry>
     <term>multipath</term>
     <listitem>
      <para>
       Detects path devices and and configures all multipath maps that it finds.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -d</term>
     <listitem>
      <para>
	Like <command>multipath</command>, but doesn't actually set up
	any maps (&ldquo;dry run&rdquo;).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath <replaceable>DEVICENAME</replaceable></term>
     <listitem>
      <para>
       Configures a specific multipath device.
       <replaceable>DEVICENAME</replaceable> can denote a member path device
       by its device node name (<filename>/dev/sdb</filename>) or  device number
       in <literal>major:minor</literal> format. Alternatively, it can be the
       WWID or name of a multipath map.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -f <replaceable>DEVICENAME</replaceable></term>
     <listitem>
      <para>
	Unconfigures ("flushes") a multipath map and its partition mappings.
	The command will fail if the map or one of its partitions is in use.
	See above for possible values of <replaceable>DEVICENAME</replaceable>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -F</term>
     <listitem>
      <para>
	Unconfigures ("flushes") all multipath maps and their partition mappings.
	The command will fail for maps in use.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -ll</term>
     <listitem>
      <para>
	Displays the status and topology of all currently configured multipath
	devices.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -ll <replaceable>DEVICENAME</replaceable></term>
     <listitem>
      <para>
       Displays the status of a specified multipath device.
       See above for possible values of <replaceable>DEVICENAME</replaceable>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -t</term>
     <listitem>
      <para>
       Shows internal hardware table and active configuration of multipath.
       Refer to <systemitem>multipath.conf(5)</systemitem> for details about the
       configuration parameters.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -T</term>
     <listitem>
      <para>
	Has a similar function like the <command>multipath -t</command> command, but shows only hardware entries
	for hardware detected on the host.
      </para>
     </listitem>
    </varlistentry>
  </variablelist>
  <para>
    The option <option>-v</option> controls the verbosity of the output.
    You can use values between 0 (only fatal errors) and 4 (verbose logging). The
    default is <option>-v2</option>. The <option>verbosity</option> option in
    <filename>/etc/multipath.conf</filename> can be used to change the default
    verbosity for both <command>multipath</command> and <command>multipathd</command>.
  </para>
  </sect2>

  <sect2 xml:id="sec-multipath-mpiotools-mpathpersist">
   <title>The mpathpersist Utility</title>
   <para>
    The <command>mpathpersist</command> utility is used to manage SCSI
    persistent reservations on Device Mapper Multipath devices. Persistent
    reservations serve to restrict access to SCSI Logical Units to certain SCSI
    initiators. In multipath configurations, it's important to use the same
    reservation keys for all I_T nexuses (paths) for a given volume; otherwise
    creating a reservation on one path may cause other paths to fail.
   </para>
   <para>
    Use this utility with the <literal>reservation_key</literal> attribute in the
    <filename>/etc/multipath.conf</filename> file to set persistent
    reservations for SCSI devices. If (and only if) this option is set,
    the <command>multipathd</command> daemon checks
    persistent reservations for newly discovered paths or reinstated paths.
   </para>
   <para>
    You can add the attribute to the <literal>defaults</literal> section or the
    <literal>multipaths</literal> section of
    <filename>multipath.conf</filename>.
    For example:
   </para>
   <screen>multipaths {
    multipath {
        wwid             3600140508dbcf02acb448188d73ec97d
        alias            yellow
        reservation_key  0x123abc
    }
}</screen>
   <para>
    After setting  <literal>reservation_key</literal> parameter for all mpath devices
    applicable for persistent management, reload the configuration using
    <command>multipathd reconfigure</command>.
   </para>
   <note>
     <title>
       Using &ldquo;<option>reservation_key file</option>&rdquo;
     </title>
     <para>
       If the special value <literal>reservation_key file</literal> is used in
       the <literal>defaults</literal> section of
       <filename>multipath.conf</filename>, reservation keys can be managed
       dynamically in the file <filename>/etc/multipath/prkeys</filename> using
       <command>mpathpersist</command>.
     </para>
     <para>
       This is the recommended way to handle persistent reservations with
       multipath maps. It is available since &productname; 12 SP4.
     </para>
   </note>
   <para>
    Use the command
    <command>mpathpersist</command> to query and set persistent reservations
    for multipath maps consisting of SCSI devices.
    Refer to the manual page <systemitem>mpathpersist(8)</systemitem> for details. The
    command-line options are the same as those of the <command>sg_persist</command> from
    the <systemitem>sg3_utils</systemitem> package.
    The <systemitem>sg_persist(8)</systemitem> manual page explains the
    semantics of the options in detail.
   </para>
  
   <para>
     In the following examples, <replaceable>DEVICE</replaceable> denotes
     a device-mapper multipath device like
     <filename>/dev/mapper/mpatha</filename>.
     The commands below are listed with long options for better readability.
     All options have single-letter replacements, like in <command>mpathpersist
     -oGS 123abc <replaceable>DEVICE</replaceable></command>.
   </para>
   <variablelist>
    <varlistentry>
     <term>mpathpersist --in --read-keys <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Read the registered reservation keys for the device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mpathpersist --in --read-reservation <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Show existing reservations for the device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mpathpersist --out --register --param-sark=123abc <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Register a reservation key for the device. This will add the
       reservation key for all I_T nexuses (path devices) on the host.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mpathpersist --out --reserve --param-rk=123abc --prout-type=5 <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Create a reservation of type 5
       (&ldquo;write exclusive - registrants only&rdquo;) for the device,
       using the previously registered key.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mpathpersist --out --release --param-rk=123abc --prout-type=5 <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Release a reservation of type 5 for the device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mpathpersist --out --register-ignore --param-sark=0 <replaceable>DEVICE</replaceable></term>
     <listitem>
       <para>
	 Delete a previously existing reservation key from the device.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-config">
  <title>Configuring the System for Multipathing</title>

  <para/>

  <sect2 xml:id="sec-multipath-configuration-start">
   <title>Enabling, starting, and stopping multipath services</title>
   <para>
    To enable multipath services to start at boot time, run the following
    command:
   </para>
<screen>&prompt.sudo;systemctl enable multipathd</screen>
   <para>
    To manually start the service in the running system, enter:
   </para>
<screen>&prompt.sudo;systemctl start multipathd</screen>
   <para>
    To restart the service, enter:
   </para>
<screen>&prompt.sudo;systemctl restart multipathd</screen>
   <para>
    In most situations, restarting the service isn't necessary.
    To simply have <command>multipathd</command> reload its configuration, run:
   </para>
   <screen>&prompt.sudo;systemctl reload multipathd</screen>
   <para>
    To check the status of the service, enter:
   </para>
<screen>&prompt.sudo;systemctl status multipathd</screen>
   <para>
    To stop the multipath services in the current session, run:
   </para>
   <screen>
&prompt.sudo;systemctl stop multipathd
&prompt.sudo;systemctl stop multipathd.socket
   </screen>
   <warning xml:id="ann-multipath-configuration-disable">
    <title>Disabling multipathd</title>
    <para>
      It is strongly recommended to have
      <filename>multipathd.service</filename> always enabled and running
      on every host that has access to multipath hardware. But sometimes it may be
      necessary to disable the service, because multipath hardware has been removed,
      because some other multipathing software is going to be deployed,
      or for troubleshooting purposes.
    </para>
     <para>
       To disable multipathing <emphasis>just for a single system boot</emphasis>, use the kernel
       parameter <literal>multipath=off</literal>. This affects both the
       booted system and the initial ramfs, which doesn't need to be rebuilt
       in this case.
     </para>
     <para>
      To disable multipathd services <emphasis>permanently</emphasis>, so that they
      will not be started on future system boots, run the
      following commands:
     </para>
    <screen>&prompt.sudo;systemctl disable multipathd
&prompt.sudo;systemctl disable multipathd.socket
&prompt.sudo;dracut --force --omit multipath
</screen>
    <para>
      (Whenever you disable or enable the multipath services,
       rebuild the <systemitem>initrd</systemitem>. See
      <xref linkend="sec-multipath-initrd-sync" xrefstyle="SectTitleOnPage"/>.)
    </para>
    <para>
     Additionally and optionally, if you also want to make sure multipath
     devices do not get set up, even when running <command>multipath</command> manually, add the
     following lines at the end of <filename>/etc/multipath.conf</filename>
     before rebuilding the initrd:
    </para>
<screen>blacklist {
    wwid .*
}</screen>
   </warning>
  </sect2>

  <sect2 xml:id="sec-multipath-configuration-sandevs">
   <title>Preparing SAN Devices for Multipathing</title>
   <para>
    Before configuring multipath I/O for your SAN devices, prepare the SAN
    devices, as necessary, by doing the following:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Configure and zone the SAN with the vendorâ€™s tools.
     </para>
    </listitem>
    <listitem>
     <para>
      Configure permissions for host LUNs on the storage arrays with the
      vendorâ€™s tools.
     </para>
    </listitem>
    <listitem>
     <para>
       If &productname; ships no driver for the host bus adapter (HBA),
       install a Linux driver from the HBA vendor.
      See the vendorâ€™s specific instructions for more details.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    If multipath devices are detected and
    <filename>multipathd.service</filename> is enabled, multipath maps should
    be created automatically. If this doesn't happen, use commands like
    <command>lsscsi</command> to check the probing of the low-level devices.
    Also inspect the system logs with <command>journalctl -b</command>.
    When the LUNs are not seen by the HBA driver, check the
    zoning setup in the SAN. In particular, check whether LUN masking is active
    and whether the LUNs are correctly assigned to the server.
   </para>
   <para>
    If the HBA driver can see LUNs, but no corresponding block devices
    are created, additional kernel parameters may be needed. See <citetitle>TID 3955167: Troubleshooting
    SCSI (LUN) Scanning Issues</citetitle> in the &suse; Knowledgebase at
    <link xlink:href="https://www.suse.com/support/kb/doc.php?id=3955167"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-configuration-partitioning">
    <title>Partitions on multipath devices</title>
    <para>
      Multipath maps can have partitions like their path devices.
      Partition table scanning and device node creation for partitions
      is done in user space by the
      <command>kpartx</command> tool. <command>kpartx</command> is
      automatically invoked by udev rules; there is usually no need to run it
      manually. Technically, &ldquo;partition&rdquo; devices created by kpartx are
      also device-mapper devices that simply map a linear range of blocks from the
      parent device. The <replaceable>N</replaceable>th partition of a
      multipath device with known WWID can be accessed reliably via
      <filename>/dev/disk/by-id/dm-uuid-part<replaceable>N</replaceable>-mpath-<replaceable>WWID</replaceable></filename>.
    </para>
    <note>
      <title>Disabling invocation of <command>kpartx</command></title>
      <para>
	The <literal>skip_kpartx</literal> option in
	<filename>/etc/multipath.conf</filename> can be used to disable
	invocation of <command>kpartx</command> on selected multipath maps. This
	may be useful on virtualization hosts, for example.
      </para>
    </note>
    <para>
      Partition tables and partitions on multipath devices can be manipulated
      as usual, using &yast; or tools like <command>fdisk</command> or <command>parted</command>. Changes
      applied to the partition table will be noted by the system when the
      partitioning tool exits. If this doesn't work (usually because a device
      is busy), try <command>multipathd reconfigure</command>, or reboot the
      system.
    </para>
    <para>
      A partitioned multipath device can't be used otherwise. For example, you
      can't create an LVM physical volume from a partitioned device. You will
      need to wipe the partition table before doing this.
    </para>
  </sect2>
  <sect2 xml:id="sec-multipath-initrd-sync">
    <title>Keeping the initial RAM disk synchronized</title>
    <important>
      <para>
	Make sure
	that the initial RAM disk and the booted system behave consistently
	regarding the use of multipathing for all block devices.
	Rebuild the initramfs after applying multipath configuration
	changes.
      </para>
    </important>
    <para>If multipathing is enabled in the system, it also needs to be
    enabled in the <filename>initramfs</filename> and vice versa.
    The only exception to this rule is option
    <xref linkend="vl-multipath-planning-type-noroot-noinitrd"/>
    in
    <xref linkend="sec-multipath-planning-type-noroot"
	  xrefstyle="SectTitleOnPage"/>.
    </para>
    <para>
      The multipath configuration must be synchronized between the booted
      system and the initrd. Therefore, if <filename>/etc/multipath.conf</filename>,
      <filename>/etc/multipath/wwids</filename>,
      <filename>/etc/multipath/bindings</filename>, or other configuration
      file or udev rules related to device identification are changed, the
      initial RAM FS needs to be rebuilt using the command:
    </para>
    <screen>&prompt.sudo;dracut -f</screen>
    <para>
      If the <filename>initrd</filename> and the system are not synchronized, the
      system will not properly boot and the start-up procedure may result in an
      emergency shell. See <xref linkend="sec-multipath-trouble-root"/> for
      instructions on how to avoid or repair such a scenario.
    </para>
    <sect3 xml:id="sec-multipath-initrd-disable">
      <title>Disabling multipathing in the Initial RAM disk</title>
    <para>
      Special care must be taken if the initial RAM disk is rebuilt in
      non-standard situations, for example, from a rescue system or after booting
      with the kernel parameter <literal>multipath=off</literal>.
      <command>dracut</command> will automatically include multipathing support
      in the initial RAM disk if and only
      if it detects that the root file system is on a multipath device while
      the initrd is being built. In such cases, it is necessary to enable or
      disable multipathing explicitly.
    </para>
    <para>
      To enable multipath support in the <filename>initrd</filename>, run the command:
    </para>
    <screen>&prompt.sudo;dracut --force --add multipath</screen>
    <para>
      To disable multipath support in <filename>initrd</filename>, run the command:
    </para>
    <screen>&prompt.sudo;dracut --force --omit multipath</screen>
    </sect3>
    <sect3 xml:id="sec-multipath-initrd-persistent">
      <title>Persistent device names in the Initial RAM disk</title>
      <para>
	When <command>dracut</command> generates the inital RAM disk, it must
	refer to disks and partitions to be mounted in a persistent manner,
	to make sure the system will boot correctly. When
	<command>dracut</command> detects multipath devices, it will use
	the DM-MP device names such as
      </para>
      <screen>/dev/mapper/3600a098000aad73f00000a3f5a275dc8-part1</screen>
      <para>
	for this purpose by default.
	This is good if the system <emphasis>always</emphasis> runs in multipath mode. But if
	the system is started without multipathing, as described in
	<xref linkend="sec-multipath-initrd-disable"/>, booting with such an
	initial RAM disk will fail, because the
	<filename>/dev/mapper</filename> devices won't exist.
      </para>
      <para>
	To prevent this from happening, change <command>dracut</command>'s
	persistent device naming policy by using the
	<option>--persistent-policy</option> option. It's recommended to set
	the policy to <literal>by-uuid</literal>:
      </para>
      <screen>&prompt.sudo;dracut --force --omit multipath --persistent-policy=by-uuid</screen>
      <para>
	It's recommended to make this setting persistent by creating a
	configuration file in <filename>/etc/dracut.conf.d</filename>:
      </para>
      <screen>
&prompt.user;echo 'persistent_policy="by-uuid"' | \
      sudo tee /etc/dracut.conf.d/persistent-policy.conf
      </screen>
      <para>
	This is particularly important for setups with
	<emphasis role="bold">root file system on a non-multipathed local disk</emphasis>
	(see <xref linkend="sec-multipath-planning-type-noroot" xrefstyle="SectTitleOnPage"/>). 
      </para>
    </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-conf-file">
 <title>Multipath configuration</title>

  <para>
    The built-in <systemitem>multipath-tools</systemitem> defaults work well for most
    setups. If customizations are needed, a configuration file needs to be
    created. The main configuration file is
    <filename>/etc/multipath.conf</filename>. In addition, files matching the pattern
    <filename>/etc/multipath/conf.d/*.conf</filename> are read in alphabetical
    order. See   <xref linkend="sec-multipath-conf-file-syntax"
    xrefstyle="SectTitleOnPage"/> for precedence rules.
  </para>
  <important>
    <title>Vendor recommendations and built-in hardware defaults</title>
    <para>
      Some storage vendors publish recommended values for multipath options
      in their documentation. These values often
      represent what the vendor has tested in his environment and found most
      suitable for the storage product.
      See disclaimer in <xref linkend="sec-multipath-hardware-autodetect"
      xrefstyle="SectTitleOnPage"/>!
    </para>
    <para>
      <systemitem>multipath-tools</systemitem> has built-in defaults for many
      storage arrays that match the published vendor recommendations.
      Run <command>multipath -T</command> to see the currently configured
      settings for your devices and compare them to vendor recommendations.
    </para>
    <para>
      Local policy may make it necessary to deviate from the defaults.
      <emphasis role="bold">Important:</emphasis> built-in hardware-specific
      device properties take
      precendence over the settings in the <literal>defaults</literal> section
      in <filename>multipath.conf</filename>. Changes must therefore be made
      in device specific subsections in the <literal>devices</literal>
      section, or in the <literal>overrides</literal> section.
    </para>
  </important>
  <note>
    <title>
      Generated configuration files
    </title>
    <para>
      The files <filename>/etc/multipath/wwids</filename>,
      <filename>/etc/multipath/bindings</filename>, and
      <filename>/etc/multipath/prkeys</filename> are maintained by
      <systemitem>multipath-tools</systemitem> to store persistent information
      about previously created multipath maps, map names, and reservation keys
      for SCSI persistent reservations, respectively. 
      Do not edit these generated configuration files.
      
    </para>
  </note>
  <note>
    <title>Configurable paths</title>
    <para>
      Except for <filename>/etc/multipath.conf</filename>, the paths of
      the configuration directories and files are configurable,
      but changing these paths is strongly discouraged.
    </para>
  </note>

  <sect2 xml:id="sec-multipath-conf-file-create">
    <title>Creating the /etc/multipath.conf file</title>
   <para>
     You can generate a <filename>multipath.conf</filename> template
     from the built-in defaults. This makes all default settings explicit.
     The behavior of <systemitem>multipath-tools</systemitem> will not change
     unless the generated file is modified. To generate the configuration
     template, run:
   </para>
   <screen>multipath -T >/etc/multipath.conf</screen>
   <para>
     Alternatively, you can create a minimal
     <filename>/etc/multipath.conf</filename>
     that just contains
     those settings you want to change. The behavior will be identical
     to modifying only the respective lines in the generated template.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-conf-file-syntax">
    <title>multipath.conf Syntax</title>
    <para>
      The <filename>/etc/multipath.conf</filename> file uses a hierarchy
      of sections, subsections, and attribute/value pairs.
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  Whitespace separates tokens. Consecutive whitespace characters are
	  collapsed into a single space, unless quoted (see below).
	</para>
      </listitem>
      <listitem>
	<para>
	  The hash (<literal>#</literal>)
	  and exclamation mark (<literal>!</literal>) characters cause the
	  rest of the line to be discarded as a comment.
	</para>
      </listitem>
      <listitem>
	<para>
	  Sections and subsections are started with a section name and an opening brace
	  (<literal>{</literal>) on the same line, and end with a closing
	  brace (<literal>}</literal>) on a line on its own.
	</para>
      </listitem>
      <listitem>
	<para>
	  Attributes and values are written on one line. Line continuations
	  are unsupported.
	</para>
      </listitem>
      <listitem>
	<para>
	  Attributes and section names must be keywords. The allowed keywords are
	  documented in <systemitem>multipath.conf(5)</systemitem>.
	</para>
      </listitem>
      <listitem>
	<para>
	  Values may be inclosed in double quotes (<literal>"</literal>). They
	  must be enclosed in quotes if they contain whitespace or comment
	  characters. A double quote character inside a value is represented
	  by a pair of double quotes (<literal>""</literal>).
	</para>
      </listitem>
      <listitem>
	<para>
	  The values of some attributes are POSIX regular expressions
	  (see <systemitem>regex(7)</systemitem>). They are case sensitive and
	  not anchored, so &ldquo;<literal>bar</literal>&rdquo; matches
	  &ldquo;<literal>"rhabarber</literal>&rdquo;.
	</para>
      </listitem>
    </itemizedlist>
    <bridgehead>Syntax Example</bridgehead>
    <screen>
section {
    subsection {
        attr1 value
	   attr2      "complex value!"
	attr3    "value with ""quoted"" word"
    } ! subsection end
} # section end
    </screen>
    <bridgehead>Precedence Rules</bridgehead>
    <para>
      As noted at the beginning of <xref linkend="sec-multipath-conf-file"
      xrefstyle="HeadingOnPage"/>, it is possible to have multiple
      configuration files. The additional files follow the same syntax rules as
      <filename>/etc/multipath.conf</filename>. Sections and attributes can
      occur multiple times. If the same attribute is set in multiple files,
      or on multiple lines in the same file, the last value read takes precedence.
    </para>
  </sect2>
  <sect2 xml:id="sec-multipath-conf-file-sections">
   <title><filename>/etc/multipath.conf</filename> Sections</title>
   <para>
    The <filename>/etc/multipath.conf</filename> file is organized into the
    following sections. Some attributes can occur in more than one section.
    See <systemitem>multipath.conf(5)</systemitem> for details.
   </para>
   <variablelist>
    <varlistentry>
     <term>defaults</term>
     <listitem>
      <para>
       General default settings.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>blacklist</term>
     <listitem>
      <para>
       Lists devices to ignore.
       See <xref linkend="sec-multipath-blacklist" xrefstyle="HeadingOnPage"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>blacklist_exceptions</term>
     <listitem>
      <para>
       Lists devices to be multipathed even though they are matched
       by the blacklist.
       See <xref linkend="sec-multipath-blacklist" xrefstyle="HeadingOnPage"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>devices</term>
     <listitem>
      <para>
	Settings specific to the storage controller. This section is
	a collection of <literal>device</literal> subsections. Values in this section
	override a value for the same attribute in the <filename>defaults</filename> section.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipaths</term>
     <listitem>
      <para>
	Settings for individual multipath devices. This section is a list of
	<literal>multipath</literal> subsections. Values override
	the <literal>defaults</literal> and <literal>devices</literal> sections.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>overrides</term>
     <listitem>
       <para>
	 Settings that override values from all other sections.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>


  <sect2 xml:id="sec-multipath-conf-file-apply">
   <title>Applying <filename>/etc/multipath.conf</filename> modifications</title>
   <para>
     To apply the configuration changes, run
   </para>
   <screen>&prompt.sudo;multipathd reconfigure</screen>
   <para>
     Don't forget to synchronize with the configuration in the initrd, see
     <xref linkend="sec-multipath-initrd-sync" xrefstyle="SectTitleOnPage"/>.
   </para>
   <warning>
     <title>Don't apply settings using <command>multipath</command></title>
     <para>
       Do not apply new settings with the <command>multipath</command>
       command while <command>multipathd</command> is running. An
       inconsistent, possibly broken setup may result.
     </para>
   </warning>
   <note xml:id="sec-multipath-conf-file-verify">
     <title>Verifying a modified setup</title>
     <para>
       It is possible to test modified settings first before they are applied,
       by running:
     </para>
     <screen>multipath -d -v2</screen>
     <para>
       This command shows new maps to be created with the proposed topology.
       However, the command doesn't show whether maps will be removed/flushed. To obtain
       even more information, run this command:
     </para>
     <screen>multipath -d -v3 2>&amp;1 | less</screen>
   </note>
  </sect2>

  <sect2 xml:id="sec-multipath-conf-file-wwid">
   <title>Configuring Device Identification</title>
   <para>
     It's crucial for multipath operation to reliably detect devices that
     represent paths to the same storage
     volume. <systemitem>multipath-tools</systemitem> use the device's World Wide
     Identification (<acronym>WWID</acronym>) for this purpose (sometimes also referred to as
     Universally Unique ID (<acronym>UUID</acronym>) or Unique ID
     (<acronym>UID</acronym> â€” don't confuse with &ldquo;User ID&rdquo;).
   </para>
   <para>
     By default, WWIDs are inferred from udev properties of the
     devices, which are determined in udev rules, either by reading device
     attributes from the sysfs file system or by using specifc I/O commands.
     To see the udev properties of a device, run
   </para>
   <screen>&prompt.user;udevadm info /dev/<replaceable>sdx</replaceable></screen>
   <para>
     The default udev properties used by <systemitem>multipath-tools</systemitem> are:
   </para>
   <itemizedlist>
     <listitem>
       <para>
	 <literal>ID_SERIAL</literal> for SCSI devices (don't confuse this
	 with the device's &ldquo;serial number&rdquo;),
       </para>
     </listitem>
     <listitem>
       <para>
	 <literal>ID_UID</literal> for DASD devices,
       </para>
     </listitem>
     <listitem>
       <para>
	 <literal>ID_WWN</literal> for NVMe devices.
       </para>
     </listitem>
   </itemizedlist>
   <para>
     It is possible, but <emphasis>not recommended</emphasis>,
     to change the device identification method using the
     <filename>multipath.conf</filename> options
     <literal>uid_attribute</literal> and <literal>uid_attrs</literal>.
     The latter has the side effect to speed up udev event processing by
     <command>multipathd</command> in certain situations. See
     <systemitem>multipath.conf(5)</systemitem> for more information.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-policies-default">
  <title>Configuring policies for polling, queuing, and failback</title>

  <para>
   The goal of multipath I/O is to provide connectivity fault tolerance between
   the storage system and the server. The desired default behavior depends on
   whether the server is a stand-alone server or a node in a high-availability
   cluster.
  </para>
  <para>
   This section discusses the most important
   <systemitem>multipath-tools</systemitem> configuration parameters for
   achieving fault tolerance.
  </para>
  <variablelist>
    <varlistentry>
      <term>polling_interval</term>
      <listitem>
	<para>
	  The time interval (in seconds) between health checks for path
	  devices. The default is 5 seconds. Failed devices are checked with
	  this time interval. For healthy devices, the time interval may be
	  increased up to <literal>max_polling_interval</literal> seconds.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
     <term>no_path_retry</term>
     <listitem>
       <para>
	 Determine what happens if all paths of a given multipath map have
	 failed or disappeared. The possible values are:
       </para>
       <variablelist>
	 <varlistentry>
	   <term>fail</term>
	   <listitem>
	     <para>
	       Fail I/O on the multipath map. This will cause I/O errors in
	       upper layers such as mounted file systems. The affected
	       files systems, and possibly the entire host, will enter
	       degraded mode.
	     </para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term>queue</term>
	   <listitem>
	     <para>
	       I/O on the multipath map is queued in the device-mapper
	       layer and sent to the device when path devices become available
	       again. This is the safest option to avoid losing data, but it
	       can have negative effects if the path devices don't get
	       reinstated for a long time. Processes reading from the device
	       will hang in uninterruptible sleep
	       (<literal>D</literal>) state.
	       Queued data occupies memory, which becomes unavailable
	       for processes. Eventually, memory will be exhausted.
	     </para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><replaceable>N</replaceable></term>
	   <listitem>
	     <para>
	       <replaceable>N</replaceable> is a positive integer.
	       Keep the map device in queuing mode for <replaceable>N</replaceable>
	       polling intervals. When the time elapses, <command>multipathd</command> fails the map
	       device. If <literal>polling_interval</literal> is 5 seconds and
	       <literal>no_path_retry</literal> is 6,
	       <command>multipathd</command> will queue I/O for approximately
	       6 * 5s = 30s before failing I/O on the map device. A carefully chosen
	       timeout value is often a good compromise between
	       <literal>fail</literal> and <literal>queue</literal>.
	     </para>
	   </listitem>
	 </varlistentry>
       </variablelist>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="vle-failback">
      <term>failback</term>
      <listitem>
       <para>
	 If a failed path device in an inactive path group
	 recovers, <command>multipathd</command> reevaluates the path
	 group priorities of all path groups
	 (see <xref linkend="sec-multipath-grouping" xrefstyle="SectTitleOnPage"/>).
	 After the reevaluation, the
	 highest-priority path group
	 may be one of the currently inactive path groups. This parameter
	 determines what happens in this situation.
       </para>
       <important>
	 <title>Observe vendor recommendations</title>
	 <para>
	   The optimal failback policy depends on the property of the storage
	   device. It's therefore strongly encouraged to verify
	   <option>failback</option> settings with the storage vendor.
	 </para>
       </important>
       <variablelist>
	 <varlistentry>
	   <term>manual</term>
	   <listitem>
	     <para>
	       Nothing happens unless the administrator runs a
	       <command>multipathd switchgroup</command>
	       (see <xref linkend="sec-multipath-mpiotools-multipathd"
	       xrefstyle="SectTitleOnPage"/>).
	     </para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term>immediate</term>
	   <listitem>
	     <para>
	       The highest-priority path group is activated immediately.
	       This is often beneficial for performance, especially on
	       standalone servers, but it shouldn't be used for arrays on which
	       path group changing is a costly operation.
	     </para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term>followover</term>
	   <listitem>
	     <para>
	       Like <literal>immediate</literal>, but only perform failback
	       when the path that has just become active is the only healthy
	       path in its path group. This is useful for cluster
	       configurations: It keeps a node from automatically failing back
	       when another node requested a failover before.
	     </para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><replaceable>N</replaceable></term>
	   <listitem>
	     <para>
	       <replaceable>N</replaceable> is a positive integer.
	       Wait for <replaceable>N</replaceable> polling intervals before
	       activating the highest priority path group. If the priorities
	       change again during this time, the wait period begins again.
	     </para>
	   </listitem>
	 </varlistentry>
       </variablelist>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>
    After modifying the <filename>/etc/multipath.conf</filename> file,
    apply your settings as described in <xref linkend="sec-multipath-conf-file-apply"/>.
  </para>

  <sect2  xml:id="sec-multipath-policies-standalone">
    <title>
      Queueing policy on standalone servers
    </title>
  <para>
   When you configure multipath I/O for a stand-alone server, a
   <literal>no_path_retry</literal> setting with value
   <literal>queue</literal>
   protects the server operating
   system from receiving I/O errors as long as possible. It queues messages
   until a multipath failover occurs. If &ldquo;infinite&rdquo; queueing is
   not desired (see above), select a numeric value that's deemed high enough
   for the storage paths to recover under ordinary circumstances (see above).
  </para>
  </sect2>
  <sect2  xml:id="sec-multipath-policies-cluster">
    <title>
      Queueing policy on clustered servers
    </title>
  <para>
   When you configure multipath I/O for a node in a high-availability cluster,
   you want multipath to report the I/O failure to trigger the resource
   failover instead of waiting for a multipath failover to be resolved. In
   cluster environments, you must modify the <literal>no_path_retry
   </literal>setting so that the cluster node receives an I/O error in relation
   to the cluster verification process (recommended to be 50% of the heartbeat
   tolerance) if the connection is lost to the storage system. In addition, you
   want the multipath <literal>failback</literal> to be set to
   <literal>manual</literal> to avoid a ping-pong of
   resources because of path failures.
  </para>
  </sect2>

 </sect1>
 <sect1 xml:id="sec-multipath-blacklist">
  <title>Blacklisting Non-Multipath Devices</title>

  <para>
   The <filename>/etc/multipath.conf</filename> file can contain a
   <command>blacklist</command> section where all non-multipath devices are
   listed. You can blacklist devices by WWID (<literal>wwid</literal> keyword),
   device name (<literal>devnode</literal> keyword), or device type
   (<literal>device</literal> section). You can also use the
   <literal>blacklist_exceptions</literal> section to enable multipath for some
   devices that are blacklisted by the regular expressions used in the
   <literal>blacklist</literal> section.
  </para>

  <note>
   <title>Preferred Blacklisting Methods</title>
   <para>
    The preferred method for blacklisting devices is by
    <emphasis>WWID</emphasis> or by <emphasis>vendor and product</emphasis>.
    Blacklisting by <emphasis>devnode</emphasis> is not recommended, because
    device nodes can change and thus are not useful for persistent device
    identification.
   </para>
  </note>

  <warning>
   <title>Regular Expressions in multipath.conf</title>
   <para>
    Regular expressions in the <filename>/etc/multipath.conf</filename> do
    <emphasis>not</emphasis> work in general. They only work if they are
    matched against common strings. However, the standard configuration of
    multipath already contains regular expressions for many devices and
    vendors. Matching regular expressions with other regular expressions does
    not work. Make sure that you are only matching against strings shown with
    <command>multipath -t</command>.
   </para>
  </warning>

  <para>
   You can typically ignore non-multipathed devices, such as
   <literal>hpsa</literal>, <literal>fd</literal>, <literal>hd</literal>,
   <literal>md</literal>, <literal>dm</literal>, <literal>sr</literal>,
   <literal>scd</literal>, <literal>st</literal>, <literal>ram</literal>,
   <literal>raw</literal>, and <literal>loop</literal>. For example, local SATA
   hard disks and flash disks do not have multiple paths. If you want
   <command>multipath</command> to ignore single-path devices, put them in the
   <command>blacklist</command> section.
  </para>

  <note>
   <title>Compatibility</title>
   <para>
    The keyword <literal>devnode_blacklist</literal> has been deprecated and
    replaced with the keyword <literal>blacklist</literal>.
   </para>
   <para>
    With &sls; 12 the glibc-provided regular expressions are used. To match an
    arbitrary string, you must now use <literal>".*"</literal> rather than
    <literal>"*"</literal>.
   </para>
  </note>

  <para>
   For example, to blacklist local devices and all arrays from the
   <filename>hpsa</filename> driver from being managed by multipath, the
   <command>blacklist</command> section looks like this:
  </para>

<screen>blacklist {
      wwid "26353900f02796769"
      devnode "^(ram|raw|loop|fd|md|dm-|sr|scd|st)[0-9]*"
      devnode "^sd[a-z][0-9]*"
}</screen>

  <para>
   You can also blacklist only the partitions from a driver instead of the
   entire array. For example, you can use the following regular expression to
   blacklist only partitions from the cciss driver and not the entire array:
  </para>

<screen>blacklist {
      devnode "^cciss!c[0-9]d[0-9]*[p[0-9]*]"
}</screen>

  <para>
   You can blacklist by specific device types by adding a
   <literal>device</literal> section in the blacklist, and using the
   <literal>vendor</literal> and <literal>product</literal> keywords.
  </para>

<screen>blacklist {
      device {
           vendor  "DELL"
           product ".*"
       }
}</screen>

  <para>
   You can use a <literal>blacklist_exceptions</literal> section to enable
   multipath for some devices that were blacklisted by the regular expressions
   used in the <literal>blacklist</literal> section. You add exceptions by WWID
   (<literal>wwid</literal> keyword), device name (<literal>devnode</literal>
   keyword), or device type (<literal>device</literal> section). You must
   specify the exceptions in the same way that you blacklisted the
   corresponding devices. That is, <literal>wwid</literal> exceptions apply to
   a <literal>wwid</literal> blacklist, <literal>devnode</literal> exceptions
   apply to a <literal>devnode</literal> blacklist, and device type exceptions
   apply to a device type blacklist.
  </para>

  <para>
   For example, you can enable multipath for a desired device type when you
   have different device types from the same vendor. Blacklist all of the
   vendorâ€™s device types in the <literal>blacklist</literal> section, and
   then enable multipath for the desired device type by adding a
   <literal>device</literal> section in a
   <literal>blacklist_exceptions</literal> section.
  </para>

<screen>blacklist {
      devnode "^(ram|raw|loop|fd|md|dm-|sr|scd|st|sda)[0-9]*"
      device {
           vendor  "DELL"
           product ".*"
       }
}

blacklist_exceptions {
      device {
           vendor  "DELL"
           product "MD3220i"
       }
}</screen>

  <para>
   You can also use the blacklist_exceptions to enable multipath only for
   specific devices. For example:
  </para>

<screen>blacklist {
      wwid ".*"
}

blacklist_exceptions {
        wwid "3600d0230000000000e13955cc3751234"
        wwid "3600d0230000000000e13955cc3751235"
}</screen>

  <para>
   After you have modified the <filename>/etc/multipath.conf</filename> file,
   you must run <command>dracut</command> <option>-f</option> to re-create the
   <filename>initrd</filename> on your system, then restart the server for the
   changes to take effect. See <xref linkend="sec-multipath-conf-file-apply"/>
   for details.
  </para>

  <para>
   Following the reboot, the local devices should no longer be listed in the
   multipath maps when you issue the <command>multipath -ll</command> command.
  </para>

  <note>
   <title>Using the <literal>find_multipaths</literal> Option</title>
   <para>
    Starting with &productname; 12 SP2, the multipath tools support the option
    <literal>find_multipaths</literal> in the <literal>defaults</literal>
    section of <filename>/etc/multipath.conf</filename>. Simply put, this
    option prevents multipath and
    <systemitem
    class="daemon">multipathd</systemitem> from setting up
    multipath maps for devices with only a single path (see the <command>man 5
    multipath.conf</command> for details). In certain configurations, this may
    save the administrator from the effort of creating blacklist entries, for
    example for local SATA disks.
   </para>
   <para>
    Convenient as it seems at first, using the
    <literal>find_multipaths</literal> option also has disadvantages. It
    complicates and slows down the system boot, because for every device found,
    the boot logic needs to wait until all devices have been discovered to see
    whether a second path exists for the device. Additionally, problems can
    arise when some paths are down or otherwise invisible at boot time&mdash;a
    device can be falsely detected as a single-path device and activated,
    causing later addition of more paths to fail.
   </para>
   <para>
    <literal>find_multipaths</literal> considers all devices that are listed in
    <filename>/etc/multipath/wwids</filename> with matching WWIDs as being
    multipath devices. This is important when
    <literal>find_multipaths</literal> is first activated: Unless
    <filename>/etc/multipath/wwids</filename> is deleted or edited, activating
    this option has no effect, because all previously existing multipath maps
    (including single-path ones) are listed in the wwids file. On SAN-boot
    systems with a multipathed root file system, make sure to keep
    <filename>/etc/multipath/wwids</filename> synchronized between the initial
    RAM disk and the file system.
   </para>
   <para>
    In summary, using <literal>find_multipaths</literal> may be convenient in
    certain use cases, but &suse; still recommends the default configuration
    with a properly configured blacklist and blacklist exceptions.
   </para>
  </note>
 </sect1>
 <sect1 xml:id="sec-multipath-names">
  <title>Configuring User-Friendly Names or Alias Names</title>

  <para>
   A multipath device can be identified by its WWID, by a user-friendly name,
   or by an alias that you assign for it. Device node names in the form of
   <filename>/dev/sdn</filename> and <filename>/dev/dm-n</filename> can change
   on reboot and might be assigned to different devices each time. A deviceâ€™s
   WWID, user-friendly name, and alias name persist across reboots, and are the
   preferred way to identify the device.
  </para>

  <important>
   <title>Using Persistent Names is Recommended</title>
   <para>
    Because device node names in the form of <filename>/dev/sdn</filename> and
    <filename>/dev/dm-n</filename> can change on reboot, referring to multipath
    devices by their WWID is preferred. You can also use a user-friendly name
    or alias that is mapped to the WWID to identify the device uniquely across
    reboots.
   </para>
  </important>

  <para>
   The following table describes the types of device names that can be used for
   a device in the <filename>/etc/multipath.conf</filename> file. For an
   example of <filename>multipath.conf</filename> settings, see the
   <filename>/usr/share/doc/packages/multipath-tools/multipath.conf.synthetic</filename>
   file.
  </para>

  <table>
   <title>Comparison of Multipath Device Name Types</title>
   <tgroup cols="2">
    <colspec colnum="1" colname="1" colwidth="1667*"/>
    <colspec colnum="2" colname="2" colwidth="8334*"/>
    <thead>
     <row>
      <entry>
       <para>
        Name Types
       </para>
      </entry>
      <entry>
       <para>
        Description
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        WWID (default)
       </para>
      </entry>
      <entry>
       <para>
        The serial WWID (Worldwide Identifier) is an identifier for the
        multipath device that is guaranteed to be globally unique and
        unchanging. The default name used in multipathing is the ID of the
        logical unit as found in the <filename>/dev/disk/by-id</filename>
        directory. For example, a device with the WWID of
        <literal>3600508e0000000009e6baa6f609e7908</literal> is listed as
        <filename>/dev/disk/by-id/scsi-3600508e0000000009e6baa6f609e7908</filename>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        User-friendly
       </para>
      </entry>
      <entry>
       <para>
        The Device Mapper Multipath device names in the
        <filename>/dev/mapper</filename> directory also reference the ID of the
        logical unit. These multipath device names are user-friendly names in
        the form of
        <filename>/dev/mapper/mpath<replaceable>N</replaceable></filename>,
        such as <filename>/dev/mapper/mpath0</filename>. The names are unique
        and persistent because they use the
        <filename>/var/lib/multipath/bindings</filename> file to track the
        association between the UUID and user-friendly names.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Alias
       </para>
      </entry>
      <entry>
       <para>
        An alias name is a globally unique name that the administrator provides
        for a multipath device. Alias names override the WWID and the
        user-friendly
        <filename>/dev/mapper/mpath<replaceable>N</replaceable></filename>
        names.
       </para>
       <para>
        If you are using user_friendly_names, do not set the alias to
        mpath<replaceable>N</replaceable> format. This may conflict with an
        automatically assigned user-friendly name, and give you incorrect
        device node names.
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   The global multipath <literal>user_friendly_names</literal> option in the
   <filename>/etc/multipath.conf</filename> file is used to enable or disable
   the use of user-friendly names for multipath devices. If it is set to
   <literal>no</literal> (the default), multipath uses the WWID as the name of
   the device. If it is set to <literal>yes</literal>, multipath uses the
   <filename>/var/lib/multipath/bindings</filename> file to assign a persistent
   and unique name to the device in the form of
   <filename>mpath&lt;<replaceable>N</replaceable>&gt;</filename> in the
   <filename>/dev/mapper </filename>directory. The <literal>bindings
   file</literal> option in the <literal>/etc/multipath.conf</literal> file can
   be used to specify an alternate location for the
   <filename>bindings</filename> file.
  </para>

  <para>
   The global multipath <literal>alias</literal> option in the
   <filename>/etc/multipath.conf</filename> file is used to explicitly assign a
   name to the device. If an alias name is set up for a multipath device, the
   alias is used instead of the WWID or the user-friendly name.
  </para>

  <para>
   Using the <literal>user_friendly_names</literal> option can be problematic
   in the following situations:
  </para>

  <variablelist>
   <varlistentry>
    <term>Root Device Is Using Multipath:</term>
    <listitem>
     <para>
      If the system root device is using multipath and you use the
      <literal>user_friendly_names</literal> option, the user-friendly settings
      in the <filename>/var/lib/multipath/bindings</filename> file are included
      in the <filename>initrd</filename>. If you later change the storage
      setup, such as by adding or removing devices, there is a mismatch between
      the bindings setting inside the <filename>initrd</filename> and the
      bindings settings in <filename>/var/lib/multipath/bindings</filename>.
     </para>
     <warning>
      <title>Binding Mismatches</title>
      <para>
       A bindings mismatch between <filename>initrd</filename> and
       <filename>/var/lib/multipath/bindings</filename> can lead to a wrong
       assignment of mount points to devices, which can result in file system
       corruption and data loss.
      </para>
     </warning>
     <para>
      To avoid this problem, we recommend that you use the default WWID
      settings for the system root device. You should not use aliases for the
      system root device. Because the device name would differ, using an alias
      causes you to lose the ability to seamlessly switch off multipathing via
      the kernel command line.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Mounting /var from Another Partition:</term>
    <listitem>
     <para>
      The default location of the <literal>user_friendly_names</literal>
      configuration file is <filename>/var/lib/multipath/bindings</filename>.
      If the <filename>/var</filename> data is not located on the system root
      device but mounted from another partition, the
      <filename>bindings</filename> file is not available when setting up
      multipathing.
     </para>
     <para>
      Make sure that the <filename>/var/lib/multipath/bindings</filename> file
      is available on the system root device and multipath can find it. For
      example, this can be done as follows:
     </para>
     <orderedlist spacing="normal">
      <listitem>
       <para>
        Move the <filename>/var/lib/multipath/bindings</filename> file to
        <filename>/etc/multipath/bindings</filename>.
       </para>
      </listitem>
      <listitem>
       <para>
        Set the <literal>bindings_file</literal> option in the
        <literal>defaults</literal> section of
        /<filename>etc/multipath.conf</filename> to this new location. For
        example:
       </para>
<screen>
defaults {
               user_friendly_names yes
               bindings_file "/etc/multipath/bindings"
}
</screen>
      </listitem>
     </orderedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Multipath Is in the initrd:</term>
    <listitem>
     <para>
      Even if the system root device is not on multipath, it is possible for
      multipath to be included in the <filename>initrd</filename>. For example,
      this can happen if the system root device is on LVM. If you use the
      <literal>user_friendly_names</literal> option and multipath is in the
      <filename>initrd</filename>, you should boot with the parameter
      <command>multipath=off</command> to avoid problems.
     </para>
     <para>
      This disables multipath only in the <filename>initrd</filename> during
      system boots. After the system boots, the
      <filename>boot.multipath</filename> and <filename>multipathd</filename>
      boot scripts can activate multipathing.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Multipathing in HA Clusters:</term>
    <listitem>
     <para>
      See <xref linkend="sec-multipath-names-ha"/> for details.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   To enable user-friendly names or to specify aliases:
  </para>

  <procedure>
   <step>
    <para>
     Open the <filename>/etc/multipath.conf</filename> file in a text editor
     with &rootuser; privileges.
    </para>
   </step>
   <step>
    <para>
     (Optional) Modify the location of the
     <filename>/var/lib/multipath/bindings</filename> file.
    </para>
    <para>
     The alternate path must be available on the system root device where
     multipath can find it.
    </para>
    <substeps performance="required">
     <step>
      <para>
       Move the <filename>/var/lib/multipath/bindings</filename> file to
       <filename>/etc/multipath/bindings</filename>.
      </para>
     </step>
     <step>
      <para>
       Set the <literal>bindings_file</literal> option in the
       <literal>defaults</literal> section of
       /<filename>etc/multipath.conf</filename> to this new location. For
       example:
      </para>
<screen>
defaults {
          user_friendly_names yes
          bindings_file "/etc/multipath/bindings"
}
</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     (Optional, not recommended) Enable user-friendly names:
    </para>
    <substeps performance="required">
     <step>
      <para>
       Uncomment the <literal>defaults</literal> section and its ending
       bracket.
      </para>
     </step>
     <step>
      <para>
       Uncomment the <literal>user_friendly_names option</literal>, then change
       its value from No to Yes.
      </para>
      <para>
       For example:
      </para>
<screen>## Use user-friendly names, instead of using WWIDs as names.
defaults {
  user_friendly_names yes
}</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     (Optional) Specify your own names for devices by using the
     <command>alias</command> option in the <command>multipath</command>
     section.
    </para>
    <para>
     For example:
    </para>
<screen>## Use alias names, instead of using WWIDs as names.
multipaths {
       multipath {
               wwid           36006048000028350131253594d303030
               alias             blue1
       }
       multipath {
               wwid           36006048000028350131253594d303041
               alias             blue2
       }
       multipath {
               wwid           36006048000028350131253594d303145
               alias             yellow1
       }
       multipath {
               wwid           36006048000028350131253594d303334
               alias             yellow2
       }
}
</screen>
    <important>
     <title>WWID compared to WWN</title>
     <para>
      When you define device aliases in the
      <filename>/etc/multipath.conf</filename> file, ensure that you use each
      deviceâ€™s WWID (such as
      <filename>3600508e0000000009e6baa6f609e7908</filename>) and not its WWN,
      which replaces the first character of a device ID with
      <filename>0x</filename>, such as
      <filename>0x600508e0000000009e6baa6f609e7908</filename>.
     </para>
    </important>
   </step>
   <step>
    <para>
     Save your changes, then close the file.
    </para>
   </step>
   <step>
    <para>
     After you have modified the <filename>/etc/multipath.conf</filename> file,
     you must run <command>dracut</command> <option>-f</option> to re-create
     the <filename>initrd</filename> on your system, then restart the server
     for the changes to take effect. See
     <xref
     linkend="sec-multipath-conf-file-apply"/> for details.
    </para>
   </step>
  </procedure>

  <para>
   To use the entire LUN directly (for example, if you are using the SAN
   features to partition your storage), you can use the
   <filename>/dev/disk/by-id/xxx</filename> names for <command>mkfs</command>,
   <filename>/etc/fstab</filename>, your application, and so on. Partitioned
   devices have <filename>_part&lt;n&gt;</filename> appended to the device
   name, such as <filename>/dev/disk/by-id/xxx_part1</filename>.
  </para>

  <para>
   In the <filename>/dev/disk/by-id</filename> directory, the multipath-mapped
   devices are represented by the deviceâ€™s <filename>dm-uuid*</filename> name
   or alias name (if you assign an alias for it in the
   <filename>/etc/multipath.conf</filename> file). The
   <filename>scsi-</filename> and <filename>wwn-</filename> device names
   represent physical paths to the devices.
  </para>

  <sect2 xml:id="sec-multipath-names-ha">
   <title>Multipath Device Names in HA Clusters</title>
   <para>
    Make sure that multipath devices have the same name across all devices by
    doing the following:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Use UUID and alias names to ensure that multipath device names are
      consistent across all nodes in the cluster. Alias names must be unique
      across all nodes. Copy the <filename>/etc/multipath.conf </filename>file
      from the node to the <filename>/etc/</filename> directory for all of the
      other nodes in the cluster.
     </para>
    </listitem>
    <listitem>
     <para>
      When using links to multipath-mapped devices, ensure that you specify the
      <filename>dm-uuid*</filename> name or alias name in the
      <filename>/dev/disk/by-id</filename> directory, and not a fixed path
      instance of the device. For information, see
      <xref linkend="sec-multipath-names" xrefstyle="SectTitleOnPage"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      Set the <literal>user_friendly_names</literal> configuration option to
      <literal>no</literal> to disable it. A user-friendly name is unique to a
      node, but a device might not be assigned the same user-friendly name on
      every node in the cluster.
     </para>
    </listitem>
   </itemizedlist>
   <note>
    <title>User-Friendly Names</title>
    <para>
     If you really need to use user-friendly names, you can force the
     system-defined user-friendly names to be consistent across all nodes in
     the cluster by doing the following:
    </para>
    <procedure>
     <step>
      <para>
       In the <filename>/etc/multipath.conf</filename> file on one node:
      </para>
      <orderedlist>
       <listitem>
        <para>
         Set the <literal>user_friendly_names</literal> configuration option to
         <literal>yes</literal> to enable it.
        </para>
        <para>
         Multipath uses the <filename>/var/lib/multipath/bindings</filename>
         file to assign a persistent and unique name to the device in the form
         of <filename>mpath&lt;<replaceable>N</replaceable>&gt;</filename> in
         the <filename>/dev/mapper </filename>directory.
        </para>
       </listitem>
       <listitem>
        <para>
         (Optional) Set the <literal>bindings_file</literal> option in the
         <literal>defaults</literal> section of the
         <literal>/etc/multipath.conf</literal> file to specify an alternate
         location for the <filename>bindings</filename> file.
        </para>
        <para>
         The default location is
         <filename>/var/lib/multipath/bindings</filename>.
        </para>
       </listitem>
      </orderedlist>
     </step>
     <step>
      <para>
       Set up all of the multipath devices on the node.
      </para>
     </step>
     <step>
      <para>
       Copy the <filename>/etc/multipath.conf</filename> file from the node to
       the <filename>/etc/</filename> directory of all the other nodes in the
       cluster.
      </para>
     </step>
     <step>
      <para>
       Copy the <filename>bindings</filename> file from the node to the
       <filename>bindings_file</filename> path on all of the other nodes in the
       cluster.
      </para>
     </step>
     <step>
      <para>
       After you have modified the <filename>/etc/multipath.conf</filename>
       file, you must run <command>dracut</command> <option>-f</option> to
       re-create the <filename>initrd</filename> on your system, then restart
       the node for the changes to take effect. See
       <xref
       linkend="sec-multipath-conf-file-apply"/> for details. This
       applies to all affected nodes.
      </para>
     </step>
    </procedure>
   </note>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-grouping">
  <title>Configuring path grouping and priorities</title>

  <para>
    Path devices in multipath maps are grouped in <emphasis>path
    groups</emphasis>, also called <emphasis>priority groups</emphasis>.
    Only one path group receives I/O at any given time.
    <command>multipathd</command> assigns <emphasis>priorities</emphasis>
    to path groups. Out of the path groups with active paths, the group
    with the highest priority is activated according
    to the configured failback policy for the map
    (see <xref linkend="sec-multipath-policies-default" xrefstyle="SecTitleOnPage"/>).
    The priority of a path group is the average of the priorities of the
    active path devices in the path group. The path priority is an integer
    value calculated from the device properties (see the description of the
    <literal>prio</literal> option below).
  </para>
  <para>This section describes the <filename>multipath.conf</filename>
    configuration parameters relevant for priority determination and path
    grouping.
  </para>
  <variablelist>
    <varlistentry>
      <term>path_grouping_policy</term>
      <listitem>
	<para>
	  Specifies the method used combine paths
	  into groups. Only the most important policies are listed here;
	  see <systemitem>multipath.conf(5)</systemitem> for other
	  less frequently used values.
	</para>
	<variablelist>
	  <varlistentry>
	    <term>failover</term>
	    <listitem>
	      <para>
		One path per path group. This setting is useful
		for traditional &ldquo;active/passive&rdquo; storage arrays.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>multibus</term>
	    <listitem>
	      <para>
		All paths in one priority group.
		This is useful for traditional &ldquo;active/active&rdquo;
		arrays.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>group_by_prio</term>
	    <listitem>
	      <para>
		Path devices with the same path priority are grouped
		together.
		This option is useful for modern arrays that support
		asymmetric access states, like <acronym>ALUA</acronym>.
		Combined with the <literal>alua</literal> or
		<literal>sysfs</literal> priority algorithms, the priority
		groups set up by <command>multipathd</command> will match the
		primary target port groups that the storage array reports through
		ALUA-related SCSI commands.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
	<para>
	  Using the same policy names, the path grouping policy for
	  a multipath map can be changed temporarily with the command
	</para>
	<screen>&prompt.sudo;multipath -p <replaceable>POLICY_NAME</replaceable> <replaceable>MAP_NAME</replaceable></screen>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>marginal_pathgroups</term>
      <listitem>
	<para>
	  If set to <literal>on</literal> or <literal>fpin</literal>,
	  &ldquo;marginal&rdquo; path devices (devices that exhibit lots of
	  transient errors) are moved to a separate group with lower priority
	  than all other path groups. This option is available since
	  &productnameshort;&nbsp;15SP3; the <literal>fpin</literal> value since
	  &productnameshort;&nbsp;15SP4. See <systemitem>multipath.conf(5)</systemitem>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>detect_prio</term>
      <listitem>
	<para>
	  If this is set to <literal>yes</literal> (default),
	  <command>multipathd</command> automatically detects the best
	  algorithm to set the priority for a storage device, and ignores
	  the <literal>prio</literal> setting.
	  In practice, this means using the <literal>sysfs</literal> prio
	  algorithm if <acronym>ALUA</acronym> support is detected.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>prio</term>
      <listitem>
	<para>
	  Determines the method to derive priorities for path devices.
	  If you override this, don't forget to set also
	</para>
	<screen>
defaults {
	  detect_prio no
}
	</screen>
	<para>
	  The following list
	  contains only the most important methods. Several other methods
	  are available, mainly to support legacy hardware. See
	  <systemitem>multipath.conf(5)</systemitem> for the full list.
	</para>
	<variablelist>
	  <varlistentry>
	    <term>alua</term>
	    <listitem>
	      <para>
		Uses SCSI-3 ALUA access states to derive path priority values.
		The optional <literal>exclusive_pref_bit</literal> argument can be used to
		determine the behavior for devices that have the ALUA
		&ldquo;preferred primary target port group&rdquo;
		(<acronym>PREF</acronym>) bit set:
	      </para>
	      <screen>
	prio alua
	prio_args exclusive_pref_bit
	      </screen>
	      <para>
		If this option is set, &ldquo;preferred&rdquo; paths get a
		priority bonus over other active/optimized paths. Otherwise,
		all active/optimized paths are assigned the same priority.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>sysfs</term>
	    <listitem>
	      <para>
		Like <literal>alua</literal>, but instead of sending SCSI
		commands to the device, obtains the access states from
		<systemitem>sysfs</systemitem>. This causes less I/O load
		than <literal>alua</literal>, but isn't suitable for all
		storage arrays with ALUA support.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>const</term>
	    <listitem>
	      <para>
		Uses a constant value for all paths.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>path_latency</term>
	    <listitem>
	      <para>
		Assigns higher priority to devices with lower I/O latency. The
		algorithm requires parameters <literal>io_num</literal> and
		<literal>base_num</literal> in <literal>prio_args</literal>
		(the values shown here are also generally recommended):
	      </para>
	      <screen>
	prio path_latency
	prio_args "io_num=20 base_num=10"
	      </screen>
	      <para>
		To obtain the priority of a path device, a continuous stream
		of <literal>io_num</literal> I/O requests is sent to the
		device, measuring the latency (time until I/O completion) of
		each request.
		The latency range between 1 Âµs and 100s is divided into
		<literal>base_num</literal> logarithmic intervals. The
		assigned priority is the interval into which the measured latency
		falls. If <literal>base_num</literal> is 10, measured latency
		<replaceable>L</replaceable> maps to priority as follows:
		<replaceable>L</replaceable> &lt; 1 Âµs &rarr; 10;
		1 Âµs &le; <replaceable>L</replaceable> &lt; 10 Âµs &rarr; 9;
		10 Âµs &le; <replaceable>L</replaceable> &lt; 100 Âµs &rarr; 8;
		â€¦; <replaceable>L</replaceable> &ge; 100 s &rarr; 0.
	      </para>
	      <para>
		Note that the latency measurement may take considerable time,
		in particular if the latencies are high.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>weightedpath</term>
	    <listitem>
	      <para>
		Assigns a priority to paths based on their name, serial
		number, Host/Bus/Device/Lun ID (<acronym>HBTL</acronym>),
		or Fibre Channel WWN.
		The priority value doesn't change over time. The
		method requires a <literal>prio_args</literal> argument, see
		<systemitem>multipath.conf(5)</systemitem> for details. For example:
	      </para>
	      <screen>
	prio weightedpath
	prio_args "hbtl 2:.*:.*:.* 10 hbtl 3:.*:.*:.* 20 hbtl .* 1"
	      </screen>
	      <para>
		This assigns devices on SCSI host 3 a higher priority than
		devices on SCSI host 2, and all others a lower priority.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>prio_args</term>
      <listitem>
	<para>
	  Some <literal>prio</literal> algorithms require extra
	  arguments. These are specified in this option, with syntax depending
	  on the algorithm. See above.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>
    After modifying the <filename>/etc/multipath.conf</filename> file,
    apply your settings as described in <xref linkend="sec-multipath-conf-file-apply"/>.
  </para>

  <sect2 xml:id="sec-multipath-policies-failover-prio">
   <title>Configuring failover priorities</title>
    <bridgehead>Multipath Attributes</bridgehead>
    <para>
     Multipath attributes are used to control the behavior of multipath I/O for
     devices. You can specify attributes as defaults for all multipath devices.
     You can also specify attributes that apply only to a given multipath
     device by creating an entry for that device in the
     <literal>multipaths</literal> section of the multipath configuration file.
    </para>
    <variablelist>
     <varlistentry>
      <term><literal>user_friendly_names</literal></term>
      <listitem>
       <para>
        Specifies whether to use world-wide IDs (WWIDs) or to use the
        <filename>/var/lib/multipath/bindings</filename> file to assign a
        persistent and unique alias to the multipath devices in the form of
        <filename>/dev/mapper/mpathN</filename>.
       </para>
       <para>
        This option can be used in the <literal>devices</literal> section and
        the <literal>multipaths</literal> section.
       </para>
       <informaltable>
        <tgroup cols="2">
         <colspec colnum="1" colname="1" colwidth="2642*"/>
         <colspec colnum="2" colname="2" colwidth="7360*"/>
         <thead>
          <row>
           <entry>
            <para>
             Value
            </para>
           </entry>
           <entry>
            <para>
             Description
            </para>
           </entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>
            <para>
             <literal>no</literal>
            </para>
           </entry>
           <entry>
            <para>
             (Default) Use the WWIDs shown in the
             <filename>/dev/disk/by-id/</filename> location.
            </para>
           </entry>
          </row>
          <row>
           <entry>
            <para>
             <literal>yes</literal>
            </para>
           </entry>
           <entry>
            <para>
             Autogenerate user-friendly names as aliases for the multipath
             devices instead of the actual ID.
            </para>
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>path_checker</literal></term>
      <listitem>
       <para>
        Determines the state of the path.
       </para>
       <informaltable>
        <tgroup cols="2">
         <colspec colnum="1" colname="1" colwidth="30%"/>
         <colspec colnum="2" colname="2" colwidth="70%"/>
         <thead>
          <row>
           <entry>
            <para>
             Value
            </para>
           </entry>
           <entry>
            <para>
             Description
            </para>
           </entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>
            <para>
             <literal>directio</literal>
            </para>
           </entry>
           <entry>
            <para>
             Reads the first sector that has direct I/O. This is useful for
             DASD devices. Logs failure messages in the &systemd; journal (see
             <xref linkend="cha-journalctl"/>).
            </para>
           </entry>
          </row>
          <row>
           <entry>
            <para>
             <literal>tur</literal>
            </para>
           </entry>
           <entry>
            <para>
             Issues an SCSI test unit ready command to the device. This is the
             preferred setting if the LUN supports it. On failure, the command
             does not fill up the &systemd; log journal with messages.
            </para>
           </entry>
          </row>
          <row>
           <entry>
            <para>
             <replaceable>CUSTOM_VENDOR_VALUE</replaceable>
            </para>
           </entry>
           <entry>
            <para>
             Some SAN vendors provide custom path_checker options:
            </para>
            <itemizedlist mark="bullet" spacing="normal">
             <listitem>
              <formalpara>
               <title><literal>cciss_tur</literal>:</title>
               <para>
                Checks the path state for HP Smart Storage Arrays.
               </para>
              </formalpara>
             </listitem>
             <listitem>
              <formalpara>
               <title><literal>emc_clariion</literal>:</title>
               <para>
                Queries the EMC Clariion EVPD page 0xC0 to determine the path
                state.
               </para>
              </formalpara>
             </listitem>
             <listitem>
              <formalpara>
               <title><literal>hp_sw</literal>:</title>
               <para>
                Checks the path state (Up, Down, or Ghost) for HP storage
                arrays with Active/Standby firmware.
               </para>
              </formalpara>
             </listitem>
             <listitem>
              <formalpara>
               <title><literal>rdac</literal>:</title>
               <para>
                Checks the path state for the LSI/Engenio RDAC storage
                controller.
               </para>
              </formalpara>
             </listitem>
            </itemizedlist>
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>path_selector</literal></term>
      <listitem>
       <para>
        Specifies the path-selector algorithm to use for load balancing.
       </para>
       <informaltable>
        <tgroup cols="2">
         <colspec colnum="1" colname="1" colwidth="2642*"/>
         <colspec colnum="2" colname="2" colwidth="7360*"/>
         <thead>
          <row>
           <entry>
            <para>
             Value
            </para>
           </entry>
           <entry>
            <para>
             Description
            </para>
           </entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>
            <para>
             <literal>round-robin 0</literal>
            </para>
           </entry>
           <entry>
            <para>
             The load-balancing algorithm used to balance traffic across all
             active paths in a priority group.
            </para>
           </entry>
          </row>
          <row>
           <entry>
            <para>
             <literal>queue-length 0</literal>
            </para>
           </entry>
           <entry>
            <para>
             A dynamic load balancer that balances the number of in-flight I/O
             on paths similar to the least-pending option.
            </para>
           </entry>
          </row>
          <row>
           <entry>
            <para>
             <literal>service-time 0</literal>
            </para>
           </entry>
           <entry>
            <para>
             (Default) A service-time oriented load balancer that balances I/O
             on paths according to the latency.
            </para>
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>pg_timeout</term>
      <listitem>
       <para>
        Specifies path group timeout handling. No value can be specified; an
        internal default is set.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="vle-polling-interval">
      <term><literal>polling_interval</literal></term>
      <listitem>
       <para>
        Specifies the time in seconds between the end of one path checking
        cycle and the beginning of the next path checking cycle.
       </para>
       <para>
        Specify an integer value greater than 0. The default value is 5. Make
        sure that you verify the polling_interval setting with your storage
        system vendor. Different storage systems can require different
        settings.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>rr_min_io_rq</literal></term>
      <listitem>
       <para>
        Specifies the number of I/O requests to route to a path before
        switching to the next path in the current path group, using
        request-based device-mapper-multipath.
       </para>
       <para>
        Specify an integer value greater than 0. The default value is 1.
       </para>
<screen>rr_min_io_rq "1"</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>rr_weight</literal></term>
      <listitem>
       <para>
        Specifies the weighting method to use for paths.
       </para>
       <informaltable>
        <tgroup cols="2">
         <colspec colnum="1" colname="1" colwidth="2642*"/>
         <colspec colnum="2" colname="2" colwidth="7360*"/>
         <thead>
          <row>
           <entry>
            <para>
             Value
            </para>
           </entry>
           <entry>
            <para>
             Description
            </para>
           </entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>
            <para>
             <literal>uniform</literal>
            </para>
           </entry>
           <entry>
            <para>
             (Default) All paths have the same round-robin weights.
            </para>
           </entry>
          </row>
          <row>
           <entry>
            <para>
             <literal>priorities</literal>
            </para>
           </entry>
           <entry>
            <para>
             Each pathâ€™s weight is determined by the pathâ€™s priority times
             the rr_min_io_rq setting.
            </para>
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>uid_attribute</literal></term>
      <listitem>
       <para>
        A udev attribute that provides a unique path identifier. The default
        value is <literal>ID_SERIAL</literal>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   <sect3 xml:id="sec-multipath-policies-failover-rr">
    <title>Configuring for Round-Robin Load Balancing</title>
    <para>
     All paths are active. I/O is configured for some number of seconds or some
     number of I/O transactions before moving to the next open path in the
     sequence.
    </para>
   </sect3>
   <sect3 xml:id="sec-multipath-policies-failover-prio-single">
    <title>Configuring for Single Path Failover</title>
    <para>
     A single path with the highest priority (lowest value setting) is active
     for traffic. Other paths are available for failover, but are not used
     unless failover occurs.
    </para>
   </sect3>
   <sect3 xml:id="sec-multipath-policies-failover-prio-rr-grouping">
    <title>Grouping I/O Paths for Round-Robin Load Balancing</title>
    <para>
     Multiple paths with the same priority fall into the active group. When all
     paths in that group fail, the device fails over to the next highest
     priority group. All paths in the group share the traffic load in a
     round-robin load balancing fashion.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-multipath-policies-failover-rtpg">
   <title>Reporting Target Path Groups</title>
   <para>
    Use the SCSI Report Target Port Groups (<command>sg_rtpg(8)</command>)
    command. For information, see the man page for
    <command>sg_rtpg(8)</command>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-root">
  <title>Configuring Multipath I/O for the Root Device</title>

  <para>
   Device Mapper Multipath I/O (DM-MPIO) is available and supported for
   <filename>/boot</filename> and <filename>/root</filename> in &productname;.
   In addition, the &yast; partitioner in the &yast; installer supports
   enabling multipath during the install.
  </para>

  <sect2 xml:id="sec-multipath-root-install">
   <title>Enabling Multipath I/O at Install Time</title>
   <para>
    To install the operating system on a multipath device, the multipath
    software must be running at install time. The
    <systemitem class="daemon">multipathd</systemitem> daemon is not
    automatically active during the system installation. You can start it by
    using the <guimenu>Configure Multipath</guimenu> option in the &yast;
    Partitioner.
   </para>
   <sect3 xml:id="sec-multipath-root-install-aa-lun">
    <title>Enabling Multipath I/O at Install Time on an Active/Active Multipath Storage LUN</title>
    <procedure>
     <step>
      <para>
       Choose <guimenu>Expert Partitioner</guimenu> on the <guimenu>Suggested
       Partitioning</guimenu> screen during the installation.
      </para>
     </step>
     <step>
      <para>
       Select the <guimenu>Hard Disks</guimenu> main icon, click the
       <guimenu>Configure</guimenu> button, then select <guimenu>Configure
       Multipath</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Start multipath.
      </para>
      <para>
       &yast; starts to rescan the disks and shows available multipath devices
       (such as
       <filename>/dev/disk/by-id/dm-uuid-mpath-3600a0b80000f4593000012ae4ab0ae65</filename>).
       This is the device that should be used for all further processing.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Next</guimenu> to continue with the installation.
      </para>
     </step>
    </procedure>
   </sect3>
   <sect3 xml:id="sec-multipath-root-install-ap-lun">
    <title>Enabling Multipath I/O at Install Time on an Active/Passive Multipath Storage LUN</title>
    <para>
     The <systemitem class="daemon">multipathd</systemitem> daemon is not
     automatically active during the system installation. You can start it by
     using the <guimenu>Configure Multipath</guimenu> option in the &yast;
     Partitioner.
    </para>
    <para>
     To enable multipath I/O at install time for an active/passive multipath
     storage LUN:
    </para>
    <procedure>
     <step>
      <para>
       Choose <guimenu>Expert Partitioner</guimenu> on the <guimenu>Suggested
       Partitioning</guimenu> screen during the installation.
      </para>
     </step>
     <step>
      <para>
       Select the <guimenu>Hard Disks</guimenu> main icon, click the
       <guimenu>Configure</guimenu> button, then select <guimenu>Configure
       Multipath</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Start multipath.
      </para>
      <para>
       &yast; starts to rescan the disks and shows available multipath devices
       (such as
       <filename>/dev/disk/by-id/dm-uuid-mpath-3600a0b80000f4593000012ae4ab0ae65</filename>).
       This is the device that should be used for all further processing. Write
       down the device path and UUID; you will need it later.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Next</guimenu> to continue with the installation.
      </para>
     </step>
     <step>
      <para>
       After all settings are done and the installation is finished, &yast;
       starts to write the boot loader information, and displays a countdown to
       restart the system. Stop the counter by clicking the
       <guimenu>Stop</guimenu> button and press
       <keycombo><keycap function="control"/><keycap function="alt"/><keycap>F5</keycap></keycombo>
       to access a console.
      </para>
     </step>
     <step>
      <para>
       Use the console to determine if a passive path was entered in the
       <filename>/boot/grub2/device.map</filename> file for the
       <filename>hd0</filename> entry.
      </para>
      <para>
       This is necessary because the installation does not distinguish between
       active and passive paths.
      </para>
      <substeps performance="required">
       <step>
        <para role="intro">
         Mount the root device to <filename>/mnt</filename> by entering
        </para>
<screen>&prompt.sudo;mount /dev/disk/by-id/<replaceable>UUID</replaceable>;_part2 /mnt</screen>
        <para>
         For example, enter
        </para>
<screen>&prompt.sudo;mount /dev/disk/by-id/dm-uuid-mpath-3600a0b80000f4593000012ae4ab0ae65_part2 /mnt</screen>
       </step>
       <step>
        <para>
         Mount the boot device to <filename>/mnt/boot</filename> by entering
        </para>
<screen>&prompt.sudo;mount /dev/disk/by-id/<replaceable>UUID</replaceable>_part1 /mnt/boot</screen>
        <para>
         For example, enter
        </para>
<screen>&prompt.sudo;mount /dev/disk/by-id/dm-uuid-mpath-3600a0b80000f4593000012ae4ab0ae65_part2 /mnt/boot</screen>
       </step>
       <step>
        <para>
         In the <filename>/mnt/boot/grub2/device.map</filename> file, determine
         if the <filename>hd0</filename> entry points to a passive path, then
         do one of the following:
        </para>
        <itemizedlist mark="bullet" spacing="normal">
         <listitem>
          <formalpara>
           <title>Active path:</title>
           <para>
            No action is needed. Skip all remaining steps and return to the
            &yast; graphical environment by pressing
            <keycombo><keycap function="control"/><keycap function="alt"/><keycap>F7</keycap></keycombo>
            and continue with the installation.
           </para>
          </formalpara>
         </listitem>
         <listitem>
          <formalpara>
           <title>Passive path:</title>
           <para>
            The configuration must be changed and the boot loader must be
            reinstalled.
           </para>
          </formalpara>
         </listitem>
        </itemizedlist>
       </step>
      </substeps>
     </step>
     <step>
      <para role="intro">
       If the <filename>hd0</filename> entry points to a passive path, change
       the configuration and reinstall the boot loader:
      </para>
      <substeps performance="required">
       <step>
        <para role="intro">
         Enter the following commands at the console prompt:
        </para>
<screen>
          mount -o bind /dev /mnt/dev
          mount -o bind /sys /mnt/sys
          mount -o bind /proc /mnt/proc
          chroot /mnt</screen>
       </step>
       <step>
        <para role="intro">
         At the console, run <command>multipath -ll</command>, then check the
         output to find the active path.
        </para>
        <para>
         Passive paths are flagged as <literal>ghost</literal>.
        </para>
       </step>
       <step>
        <para>
         In the <filename>/boot/grub2/device.map</filename> file, change the
         <literal>hd0</literal> entry to an active path, save the changes, and
         close the file.
        </para>
       </step>
       <step>
        <para>
         Reinstall the boot loader by entering
        </para>
<screen>grub-install /dev/disk/by-id/<replaceable>UUID</replaceable>_part1 /mnt/boot</screen>
        <para>
         For example, enter
        </para>
<screen>grub-install /dev/disk/by-id/dm-uuid-mpath-3600a0b80000f4593000012ae4ab0ae65_part2 /mnt/boot</screen>
       </step>
       <step>
        <para>
         Enter the following commands:
        </para>
<screen>exit
umount /mnt/*
umount /mnt</screen>
       </step>
      </substeps>
     </step>
     <step>
      <para>
       Return to the &yast; graphical environment by pressing
       <keycombo><keycap function="control"/><keycap function="alt"/><keycap>F7</keycap></keycombo>.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>OK</guimenu> to continue with the installation reboot.
      </para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-multipath-root-enable-existing">
   <title>Enabling Multipath I/O for an Existing Root Device</title>
   <procedure>
    <step>
     <para>
      Install Linux with only a single path active, preferably one where the
      <filename>by-id</filename> symbolic links are listed in the partitioner.
     </para>
    </step>
    <step>
     <para>
      Mount the devices by using the <filename>/dev/disk/by-id</filename> path
      used during the install.
     </para>
    </step>
    <step>
     <para>
      Open or create <filename>/etc/dracut.conf.d/10-mp.conf</filename> and add
      the following line (mind the leading whitespace):
     </para>
<screen>force_drivers+=" dm-multipath"</screen>
    </step>
    <step>
     <para>
      <remark condition="clarity">
       2014-09-05 - fs: Check if the following is still true
      </remark>
      For &zseries;, before running <command>dracut</command>, edit the
      <filename>/etc/zipl.conf</filename> file to change the by-path
      information in <filename>zipl.conf</filename> with the same by-id
      information that was used in <filename>/etc/fstab</filename>.
     </para>
    </step>
    <step>
     <para>
      Run <command>dracut</command> <option>-f</option> to update the
      <filename>initrd</filename> image.
     </para>
    </step>
    <step>
     <para>
      For &zseries;, after running <command>dracut</command>, run
      <command>zipl</command>.
     </para>
    </step>
    <step>
     <para>
      Reboot the server.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-multipath-root-disable">
   <title>Disabling Multipath I/O on the Root Device</title>
   <para>
    Add <literal>multipath=off</literal> to the kernel command line. This can
    be done with the &yast; Boot Loader module. Open <menuchoice> <guimenu>Boot
    Loader Installation</guimenu> <guimenu>Kernel Parameters</guimenu>
    </menuchoice> and add the parameter to both command lines.
   </para>
   <para>
    This affects only the root device. All other devices are not affected.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-raid">
  <title>Configuring Multipath I/O for an Existing Software RAID</title>

  <para>
   Ideally, you should configure multipathing for devices before you use them
   as components of a software RAID device. If you add multipathing after
   creating any software RAID devices, the DM-MPIO service might be starting
   after the <command>multipath</command> service on reboot, which makes
   multipathing appear not to be available for RAIDs. You can use the procedure
   in this section to get multipathing running for a previously existing
   software RAID.
  </para>

  <para>
   For example, you might need to configure multipathing for devices in a
   software RAID under the following circumstances:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     If you create a new software RAID as part of the Partitioning settings
     during a new install or upgrade.
    </para>
   </listitem>
   <listitem>
    <para>
     If you did not configure the devices for multipathing before using them in
     the software RAID as a member device or spare.
    </para>
   </listitem>
   <listitem>
    <para>
     If you grow your system by adding new HBA adapters to the server or
     expanding the storage subsystem in your SAN.
    </para>
   </listitem>
  </itemizedlist>

  <note>
   <title>Assumptions</title>
   <para>
    The following instructions assume the software RAID device is
    <filename>/dev/mapper/mpath0</filename>, which is its device name as
    recognized by the kernel. It assumes you have enabled user-friendly names
    in the <filename>/etc/multipath.conf</filename> file as described in
    <xref linkend="sec-multipath-names" xrefstyle="HeadingOnPage"/>.
   </para>
   <para>
    Make sure to modify the instructions for the device name of your software
    RAID.
   </para>
  </note>

  <procedure>
   <step>
    <para role="intro">
     Open a terminal console.
    </para>
    <para>
     Except where otherwise directed, use this console to enter the commands in
     the following steps.
    </para>
   </step>
   <step>
    <para>
     If any software RAID devices are currently mounted or running, enter the
     following commands for each device to unmount the device and stop it.
    </para>
<screen>&prompt.sudo;umount /dev/mapper/mpath0
&prompt.sudo;mdadm --misc --stop /dev/mapper/mpath0</screen>
   </step>
   <step>
    <para>
     Stop the <command>md</command> service by entering
    </para>
<screen>&prompt.sudo;systemctl stop mdmonitor</screen>
   </step>
   <step>
    <para>
     Start the <systemitem class="daemon">multipathd</systemitem> daemon by
     entering the following command:
    </para>
<screen>&prompt.user;systemctl start multipathd</screen>
   </step>
   <step>
    <para>
     After the multipathing service has been started, verify that the software
     RAIDâ€™s component devices are listed in the
     <filename>/dev/disk/by-id</filename> directory. Do one of the following:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <formalpara>
       <title>Devices Are Listed:</title>
       <para>
        The device names should now have symbolic links to their Device Mapper
        Multipath device names, such as <filename>/dev/dm-1</filename>.
       </para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>Devices Are Not Listed:</title>
       <para>
        Force the multipath service to recognize them by flushing and
        rediscovering the devices by entering
       </para>
      </formalpara>
<screen>&prompt.sudo;multipath -F
&prompt.sudo;multipath -v0</screen>
      <para>
       The devices should now be listed in
       <filename>/dev/disk/by-id</filename>, and have symbolic links to their
       Device Mapper Multipath device names. For example:
      </para>
<screen>lrwxrwxrwx 1 root root 10 2011-01-06 11:42 dm-uuid-mpath-36006016088d014007e0d0d2213ecdf11 -&gt; ../../dm-1</screen>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     Restart the <filename>mdmonitor</filename> service and the RAID device by
     entering
    </para>
<screen>&prompt.sudo;systemctl start mdmonitor</screen>
   </step>
   <step>
    <para>
     Check the status of the software RAID by entering
    </para>
<screen>&prompt.sudo;mdadm --detail /dev/mapper/mpath0</screen>
    <para>
     The RAIDâ€™s component devices should match their Device Mapper Multipath
     device names that are listed as the symbolic links of devices in the
     <filename>/dev/disk/by-id</filename> directory.
    </para>
   </step>
   <step>
    <para>
     In case the root (<filename>/</filename>) device or any parts of it (such
     as <filename>/var</filename>, <filename>/etc</filename>,
     <filename>/log</filename>) are on the SAN and multipath is needed to boot,
     rebuild the <systemitem>initrd</systemitem>:
    </para>
<screen>&prompt.user;dracut -f --add-multipath</screen>
   </step>
   <step>
    <para>
     Reboot the server to apply the changes.
    </para>
   </step>
   <step>
    <para>
     Verify that the software RAID array comes up properly on top of the
     multipathed devices by checking the RAID status. Enter
    </para>
<screen>&prompt.sudo;mdadm --detail /dev/mapper/mpath0</screen>
    <para>
     For example:
    </para>
    <simplelist><member><literal>Number Major Minor RaidDevice State</literal></member><member><literal>0 253 0 0 active sync /dev/dm-0</literal></member><member><literal>1 253 1 1 active sync /dev/dm-1</literal></member><member><literal>2 253 2 2 active sync /dev/dm-2</literal></member>
    </simplelist>
   </step>
  </procedure>

  <note>
   <title>Using mdadm with Multipath Devices</title>
   <para>
    The <command>mdadm</command> tool requires that the devices be accessed by
    the ID rather than by the device node path. Refer to
    <xref linkend="sec-multipath-mpiotools-mdadm"/> for details.
   </para>
  </note>
 </sect1>
 <sect1 xml:id="sec-multipath-lvm">
  <title>Using LVM2 on Multipath Devices</title>

  <para>
   When using multipath, all paths to a resource are present as devices in the
   device tree. By default LVM checks if there is a multipath device on top of
   any device in the device tree. If LVM finds a multipath device on top, it
   assumes that the device is a multipath component and ignores the
   (underlying) device. This is the most likely desired behavior, but it can be
   changed in <filename>/etc/lvm/lvm.conf</filename>. When
   multipath_component_detection is set to 0, LVM is scanning multipath
   component devices. The default entry in lvm.conf is:
  </para>

<screen>    # By default, LVM2 will ignore devices used as component paths
    # of device-mapper multipath devices.
    # 1 enables; 0 disables.
    multipath_component_detection = 1</screen>
 </sect1>
 <sect1 xml:id="sec-multipath-best-practice">
  <title>Best Practice</title>

  <para/>

  <sect2 xml:id="sec-multipath-best-practice-scandev">
   <title>Scanning for New Devices without Rebooting</title>
   <para>
    If your system has already been configured for multipathing and you later
    need to add storage to the SAN, you can use the
    <command>rescan-scsi-bus.sh</command> script to scan for the new devices.
    By default, this script scans all HBAs with typical LUN ranges. The general
    syntax for the command looks like the following:
   </para>
<screen>&prompt.sudo;rescan-scsi-bus.sh [options] [host [host ...]]</screen>
   <para>
    For most storage subsystems, the script can be run successfully without
    options. However, some special cases might need to use one or more options.
    Run <command>rescan-scsi-bus.sh --help</command> for details.
   </para>
   <warning>
    <title>EMC PowerPath Environments</title>
    <para>
     In EMC PowerPath environments, do not use the
     <filename>rescan-scsi-bus.sh</filename> utility provided with the
     operating system or the HBA vendor scripts for scanning the SCSI buses. To
     avoid potential file system corruption, EMC requires that you follow the
     procedure provided in the vendor documentation for EMC PowerPath for
     Linux.
    </para>
   </warning>
   <para>
    Use the following procedure to scan the devices and make them available to
    multipathing without rebooting the system.
   </para>
   <procedure>
    <step>
     <para>
      On the storage subsystem, use the vendorâ€™s tools to allocate the device
      and update its access control settings to allow the Linux system access
      to the new storage. Refer to the vendorâ€™s documentation for details.
     </para>
    </step>
    <step>
     <para>
      Scan all targets for a host to make its new device known to the middle
      layer of the Linux kernelâ€™s SCSI subsystem. At a terminal console
      prompt, enter
     </para>
<screen>&prompt.sudo;rescan-scsi-bus.sh</screen>
     <para>
      Depending on your setup, you might need to run
      <command>rescan-scsi-bus.sh</command> with optional parameters. Refer to
      <command>rescan-scsi-bus.sh --help</command> for details.
     </para>
    </step>
    <step>
     <para>
      Check for scanning progress in the &systemd; journal (see
      <xref linkend="cha-journalctl"/> for details). At a terminal console
      prompt, enter
     </para>
<screen>&prompt.sudo;journalctl -r</screen>
     <para>
      This command displays the last lines of the log. For example:
     </para>
<screen>&prompt.sudo;journalctl -r
Feb 14 01:03 kernel: SCSI device sde: 81920000
Feb 14 01:03 kernel: SCSI device sdf: 81920000
Feb 14 01:03 multipathd: sde: path checker registered
Feb 14 01:03 multipathd: sdf: path checker registered
Feb 14 01:03 multipathd: mpath4: event checker started
Feb 14 01:03 multipathd: mpath5: event checker started
Feb 14 01:03:multipathd: mpath4: remaining active paths: 1
Feb 14 01:03 multipathd: mpath5: remaining active paths: 1
[...]</screen>
    </step>
    <step>
     <para>
      Repeat the previous steps to add paths through other HBA adapters on the
      Linux system that are connected to the new device.
     </para>
    </step>
    <step>
     <para>
      Run the <command>multipath</command> command to recognize the devices for
      DM-MPIO configuration. At a terminal console prompt, enter
     </para>
<screen>&prompt.sudo;multipath</screen>
     <para>
      You can now configure the new device for multipathing.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-scanpart">
   <title>Scanning for New Partitioned Devices without Rebooting</title>
   <para>
    Use the example in this section to detect a newly added multipathed LUN
    without rebooting.
   </para>
   <warning>
    <title>EMC PowerPath Environments</title>
    <para>
     In EMC PowerPath environments, do not use the
     <filename>rescan-scsi-bus.sh</filename> utility provided with the
     operating system or the HBA vendor scripts for scanning the SCSI buses. To
     avoid potential file system corruption, EMC requires that you follow the
     procedure provided in the vendor documentation for EMC PowerPath for
     Linux.
    </para>
   </warning>
   <procedure>
    <step>
     <para>
      Open a terminal console.
     </para>
    </step>
    <step>
     <para>
      Scan all targets for a host to make its new device known to the middle
      layer of the Linux kernelâ€™s SCSI subsystem. At a terminal console
      prompt, enter
     </para>
<screen>&prompt.user;rescan-scsi-bus.sh</screen>
     <para>
      Depending on your setup, you might need to run
      <command>rescan-scsi-bus.sh</command> with optional parameters. Refer to
      <command>rescan-scsi-bus.sh --help</command> for details.
     </para>
    </step>
    <step>
     <para>
      Verify that the device is seen (such as if the link has a new time stamp)
      by entering
     </para>
<screen>&prompt.user;ls -lrt /dev/dm-*</screen>
     <para>
      You can also verify the devices in <filename>/dev/disk/by-id</filename>
      by entering
     </para>
<screen>&prompt.user;ls -l /dev/disk/by-id/</screen>
    </step>
    <step>
     <para>
      Verify the new device appears in the log by entering
     </para>
<screen>&prompt.sudo;journalctl -r</screen>
    </step>
    <step>
     <para>
      Use a text editor to add a new alias definition for the device in the
      <filename>/etc/multipath.conf</filename> file, such as
      <filename>data_vol3</filename>.
     </para>
     <para>
      For example, if the UUID is
      <filename>36006016088d014006e98a7a94a85db11</filename>, make the
      following changes:
     </para>
<screen>defaults {
     user_friendly_names   yes
  }
multipaths {
     multipath {
          wwid    36006016088d014006e98a7a94a85db11
          alias  data_vol3
          }
  }</screen>
    </step>
    <step>
     <para>
      Create a partition table for the device by entering
     </para>
<screen>&prompt.user;fdisk /dev/disk/by-id/dm-uuid-mpath-&lt;UUID&gt;</screen>
     <para>
      Replace UUID with the device WWID, such as
      <filename>36006016088d014006e98a7a94a85db11</filename>.
     </para>
    </step>
    <step>
     <para>
      Trigger udev by entering
     </para>
<screen>&prompt.sudo;echo 'add' &gt; /sys/block/<replaceable>DM_DEVICE</replaceable>/uevent</screen>
     <para>
      For example, to generate the device-mapper devices for the partitions on
      <filename>dm-8</filename>, enter
     </para>
<screen>&prompt.sudo;echo 'add' &gt; /sys/block/dm-8/uevent</screen>
    </step>
    <step>
     <para>
      Create a file system on the device
      <filename>/dev/disk/by-id/dm-uuid-mpath-<replaceable>UUID_partN</replaceable></filename>.
      Depending on your choice for the file system, you may use one of the
      following commands for this purpose: <command>mkfs.btrfs</command>
      <command>mkfs.ext3</command>, <command>mkfs.ext4</command>, or
      <command>mkfs.xfs</command>. Refer to the respective man pages for
      details. Replace <filename>UUID_partN</filename> with the actual UUID and
      partition number, such as 36006016088d014006e98a7a94a85db11_part1.
     </para>
    </step>
    <step>
     <para>
      Create a label for the new partition by entering the following command:
     </para>
<screen>&prompt.sudo;tune2fs -L <replaceable>LABELNAME</replaceable> /dev/disk/by-id/dm-uuid-<replaceable>UUID_partN</replaceable>
</screen>
     <para>
      Replace <filename>UUID_partN</filename> with the actual UUID and
      partition number, such as 36006016088d014006e98a7a94a85db11_part1.
      Replace <replaceable>LABELNAME</replaceable> with a label of your choice.
     </para>
    </step>
    <step>
     <para>
      Reconfigure DM-MPIO to let it read the aliases by entering
     </para>
<screen>&prompt.sudo;multipathd -k'reconfigure'</screen>
    </step>
    <step>
     <para>
      Verify that the device is recognized by
      <systemitem class="daemon">multipathd</systemitem> by entering
     </para>
<screen>&prompt.sudo;multipath -ll</screen>
    </step>
    <step>
     <para>
      Use a text editor to add a mount entry in the
      <filename>/etc/fstab</filename> file.
     </para>
     <para>
      At this point, the alias you created in a previous step is not yet in the
      <filename>/dev/disk/by-label</filename> directory. Add a mount entry for
      the <filename>/dev/dm-9</filename> path, then change the entry before the
      next time you reboot to
     </para>
<screen>LABEL=<replaceable>LABELNAME</replaceable></screen>
    </step>
    <step>
     <para>
      Create a directory to use as the mount point, then mount the device.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-status">
   <title>Viewing Multipath I/O Status</title>
   <para>
    Querying the multipath I/O status outputs the current status of the
    multipath maps.
   </para>
   <para>
    The <command>multipath -l</command> option displays the current path status
    as of the last time that the path checker was run. It does not run the path
    checker.
   </para>
   <para>
    The <command>multipath -ll</command> option runs the path checker, updates
    the path information, then displays the current status information. This
    command always displays the latest information about the path status.
   </para>
<screen>&prompt.sudo;multipath -ll
3600601607cf30e00184589a37a31d911
[size=127 GB][features="0"][hwhandler="1 emc"]

\_ round-robin 0 [active][first]
  \_ 1:0:1:2 sdav 66:240  [ready ][active]
  \_ 0:0:1:2 sdr  65:16   [ready ][active]

\_ round-robin 0 [enabled]
  \_ 1:0:0:2 sdag 66:0    [ready ][active]
  \_ 0:0:0:2 sdc  8:32    [ready ][active]</screen>
   <para>
    For each device, it shows the deviceâ€™s ID, size, features, and hardware
    handlers.
   </para>
   <para>
    Paths to the device are automatically grouped into priority groups on
    device discovery. Only one priority group is active at a time. For an
    active/active configuration, all paths are in the same group. For an
    active/passive configuration, the passive paths are placed in separate
    priority groups.
   </para>
   <para>
    The following information is displayed for each group:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Scheduling policy used to balance I/O within the group, such as
      round-robin
     </para>
    </listitem>
    <listitem>
     <para>
      Whether the group is active, disabled, or enabled
     </para>
    </listitem>
    <listitem>
     <para>
      Whether the group is the first (highest priority) group
     </para>
    </listitem>
    <listitem>
     <para>
      Paths contained within the group
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The following information is displayed for each path:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The physical address as <replaceable>HOST:BUS:TARGET:LUN</replaceable>,
      such as 1:0:1:2
     </para>
    </listitem>
    <listitem>
     <para>
      Device node name, such as <filename>sda</filename>
     </para>
    </listitem>
    <listitem>
     <para>
      Major:minor numbers
     </para>
    </listitem>
    <listitem>
     <para>
      Status of the device
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-io-error">
   <title>Managing I/O in Error Situations</title>
   <para>
    You might need to configure multipathing to queue I/O if all paths fail
    concurrently by enabling queue_if_no_path. Otherwise, I/O fails immediately
    if all paths are gone. In certain scenarios, where the driver, the HBA, or
    the fabric experience spurious errors, DM-MPIO should be configured to
    queue all I/O where those errors lead to a loss of all paths, and never
    propagate errors upward.
   </para>
   <para>
    When you use multipathed devices in a cluster, you might choose to disable
    queue_if_no_path. This automatically fails the path instead of queuing the
    I/O, and escalates the I/O error to cause a failover of the cluster
    resources.
   </para>
   <para>
    Because enabling queue_if_no_path leads to I/O being queued indefinitely
    unless a path is reinstated, ensure that <command>multipathd</command> is
    running and works for your scenario. Otherwise, I/O might be stalled
    indefinitely on the affected multipathed device until reboot or until you
    manually return to failover instead of queuing.
   </para>
   <para>
    To test the scenario:
   </para>
   <procedure>
    <step>
     <para>
      Open a terminal console.
     </para>
    </step>
    <step>
     <para>
      Activate queuing instead of failover for the device I/O by entering
     </para>
<screen>&prompt.sudo;dmsetup message <replaceable>DEVICE_ID</replaceable> 0 queue_if_no_path</screen>
     <para>
      Replace the <replaceable>DEVICE_ID</replaceable> with the ID for your
      device. The 0 value represents the sector and is used when sector
      information is not needed.
     </para>
     <para>
      For example, enter:
     </para>
<screen>&prompt.sudo;dmsetup message 3600601607cf30e00184589a37a31d911 0 queue_if_no_path</screen>
    </step>
    <step>
     <para>
      Return to failover for the device I/O by entering
     </para>
<screen>&prompt.sudo;dmsetup message <replaceable>DEVICE_ID</replaceable> 0 fail_if_no_path</screen>
     <para>
      This command immediately causes all queued I/O to fail.
     </para>
     <para>
      Replace the <replaceable>DEVICE_ID</replaceable> with the ID for your
      device. For example, enter
     </para>
<screen>&prompt.sudo;dmsetup message 3600601607cf30e00184589a37a31d911 0 fail_if_no_path</screen>
    </step>
   </procedure>
   <para>
    To set up queuing I/O for scenarios where all paths fail:
   </para>
   <procedure>
    <step>
     <para>
      Open a terminal console.
     </para>
    </step>
    <step>
     <para>
      Open the <filename>/etc/multipath.conf</filename> file in a text editor.
     </para>
    </step>
    <step>
     <para>
      Uncomment the defaults section and its ending bracket, then add the
      <literal>default_features</literal> setting, as follows:
     </para>
<screen>defaults {
  default_features "1 queue_if_no_path"
}</screen>
    </step>
    <step>
     <para>
      After you modify the <filename>/etc/multipath.conf</filename> file, you
      must run <command>dracut</command> <option>-f</option> to re-create the
      <filename>initrd</filename> on your system, then reboot for the changes
      to take effect.
     </para>
    </step>
    <step>
     <para>
      When you are ready to return to failover for the device I/O, enter
     </para>
<screen>&prompt.sudo;dmsetup message <replaceable>MAPNAME</replaceable> 0 fail_if_no_path</screen>
     <para>
      Replace the <replaceable>MAPNAME</replaceable> with the mapped alias name
      or the device ID for the device. The 0 value represents the sector and is
      used when sector information is not needed.
     </para>
     <para>
      This command immediately causes all queued I/O to fail and propagates the
      error to the calling application.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-io-stalled">
   <title>Resolving Stalled I/O</title>
   <para>
    If all paths fail concurrently and I/O is queued and stalled, do the
    following:
   </para>
   <procedure>
    <step>
     <para>
      Enter the following command at a terminal prompt:
     </para>
<screen>&prompt.sudo;dmsetup message <replaceable>MAPNAME</replaceable> 0 fail_if_no_path</screen>
     <para>
      Replace <literal><replaceable>MAPNAME</replaceable></literal> with the
      correct device ID or mapped alias name for the device. The 0 value
      represents the sector and is used when sector information is not needed.
     </para>
     <para>
      This command immediately causes all queued I/O to fail and propagates the
      error to the calling application.
     </para>
    </step>
    <step>
     <para>
      Reactivate queuing by entering the following command:
     </para>
<screen>&prompt.sudo;dmsetup message <replaceable>MAPNAME</replaceable> 0 queue_if_no_path</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-zseries">
   <title>Configuring Default Settings for &zseries; Devices</title>
   <para>
    Testing of the &zseries; device with multipathing has shown that the
    <literal>dev_loss_tmo</literal> parameter should be set to infinity
    (2147483647), and the <literal>fast_io_fail_tmo</literal> parameter should
    be set to 5 seconds. If you are using &zseries; devices, modify the
    <filename>/etc/multipath.conf</filename> file to specify the values as
    follows:
   </para>
<screen>defaults {
       dev_loss_tmo 2147483647
       fast_io_fail_tmo 5
}</screen>
   <para>
    The <literal>dev_loss_tmo</literal> parameter sets the number of seconds to
    wait before marking a multipath link as bad. When the path fails, any
    current I/O on that failed path fails. The default value varies according
    to the device driver being used. To use the driverâ€™s internal timeouts,
    set the value to zero (0). It can also be set to "infinity" or 2147483647,
    which sets it to the max value of 2147483647 seconds (68 years).
   </para>
   <para>
    The <literal>fast_io_fail_tmo</literal> parameter sets the length of time
    to wait before failing I/O when a link problem is detected. I/O that
    reaches the driver fails. If I/O is in a blocked queue, the I/O does not
    fail until the <literal>dev_loss_tmo</literal> time elapses and the queue
    is unblocked.
   </para>
   <para>
    If you modify the <filename>/etc/multipath.conf</filename> file, the
    changes are not applied until you update the multipath maps, or until the
    <systemitem class="daemon">multipathd</systemitem> daemon is restarted
    (<command>systemctl restart multipathd</command>).
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-netapp">
   <title>Using Multipath with NetApp Devices</title>
   <para>
    When using multipath for NetApp devices, we recommend the following
    settings in the <filename>/etc/multipath.conf</filename> file:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Set the default values for the following parameters globally for NetApp
      devices:
     </para>
<screen>max_fds max
queue_without_daemon no</screen>
    </listitem>
    <listitem>
     <para>
      Set the default values for the following parameters for NetApp devices in
      the hardware table:
     </para>
<screen>dev_loss_tmo infinity
fast_io_fail_tmo 5
features "3 queue_if_no_path pg_init_retries 50"</screen>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-noflush">
   <title>Using --noflush with Multipath Devices</title>
   <para>
    The <option>--noflush</option> option should always be used when running on
    multipath devices.
   </para>
   <para>
    For example, in scripts where you perform a table reload, you use the
    <literal>--noflush</literal> option on resume to ensure that any
    outstanding I/O is not flushed, because you need the multipath topology
    information.
   </para>
<screen>load
resume --noflush</screen>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-san-timeout">
   <title>SAN Timeout Settings When the Root Device Is Multipathed</title>
<!-- Bug 492469 - FC boot lun with device mapper multipath, server died
    when no path available for short time, comment 42 -->
   <para>
    A system with root (<filename>/</filename>) on a multipath device might
    stall when all paths have failed and are removed from the system because a
    <literal>dev_loss_tmo</literal> timeout is received from the storage
    subsystem (such as Fibre Channel storage arrays).
   </para>
   <para>
    If the system device is configured with multiple paths and the multipath
    <literal>no_path_retry</literal> setting is active, you should modify the
    storage subsystemâ€™s <literal>dev_loss_tmo</literal> setting accordingly
    to ensure that no devices are removed during an all-paths-down scenario. We
    strongly recommend that you set the <literal>dev_loss_tmo</literal> value
    to be equal to or higher than the <literal>no_path_retry</literal> setting
    from multipath.
   </para>
   <para>
    The recommended setting for the storage subsystemâ€™s
    <literal>dev_los_tmo</literal> is
   </para>
<screen>&lt;dev_loss_tmo&gt; = &lt;no_path_retry&gt; * &lt;polling_interval&gt;</screen>
   <para>
    where the following definitions apply for the multipath values:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <literal>no_path_retry</literal> is the number of retries for multipath
      I/O until the path is considered to be lost, and queuing of IO is
      stopped.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>polling_interval</literal> is the time in seconds between path
      checks.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Each of these multipath values should be set from the
    <filename>/etc/multipath.conf</filename> configuration file. For
    information, see
    <xref linkend="sec-multipath-conf-file" xrefstyle="SectTitleOnPage"/>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-trouble">
  <title>Troubleshooting MPIO</title>

  <para>
   This section describes some known issues and possible solutions for MPIO.
  </para>

  <sect2 xml:id="sec-multipath-trouble-grub2">
   <title>Installing GRUB2 on Multipath Devices</title>
   <para>
    On legacy BIOS systems with Btrfs, <command>grub2-install</command> can
    fail with a <emphasis>permission denied</emphasis>. To fix this, make sure
    that the
    <filename>/boot/grub2/<replaceable>SUBDIR</replaceable>/</filename>
    subvolume is mounted in read-write (rw) mode.
    <replaceable>SUBDIR</replaceable> can be <literal>x86_64-efi</literal> or
    <literal>i386-pc</literal>.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-trouble-root">
   <title>The System Exits to Emergency Shell at Boot When Multipath Is Enabled</title>
   <para>
    During boot the system exits into the emergency shell with messages similar
    to the following:
   </para>
<screen>[  OK  ] Listening on multipathd control socket.
         Starting Device-Mapper Multipath Device Controller...
[  OK  ] Listening on Device-mapper event daemon FIFOs.
         Starting Device-mapper event daemon...
         Expecting device dev-disk-by\x2duuid-34be48b2\x2dc21...32dd9.device...
         Expecting device dev-sda2.device...
[  OK  ] Listening on udev Kernel Socket.
[  OK  ] Listening on udev Control Socket.
         Starting udev Coldplug all Devices...
         Expecting device dev-disk-by\x2duuid-1172afe0\x2d63c...5d0a7.device...
         Expecting device dev-disk-by\x2duuid-c4a3d1de\x2d4dc...ef77d.device...
[  OK  ] Started Create list of required static device nodes ...current kernel.
         Starting Create static device nodes in /dev...
[  OK  ] Started Collect Read-Ahead Data.
[  OK  ] Started Device-mapper event daemon.
[  OK  ] Started udev Coldplug all Devices.
         Starting udev Wait for Complete Device Initialization...
[  OK  ] Started Replay Read-Ahead Data.
         Starting Load Kernel Modules...
         Starting Remount Root and Kernel File Systems...
[  OK  ] Started Create static devices
[*     ] (1 of 4) A start job is running for dev-disk-by\x2du...(7s / 1min 30s)
[*     ] (1 of 4) A start job is running for dev-disk-by\x2du...(7s / 1min 30s)

...

Timed out waiting for device dev-disk-by\x2duuid-c4a...cfef77d.device.
[DEPEND] Dependency failed for /opt.
[DEPEND] Dependency failed for Local File Systems.
[DEPEND] Dependency failed for Postfix Mail Transport Agent.
Welcome to emergency shell
Give root password for maintenance
(or press Control-D to continue):</screen>
    <para>
     At this stage, you are working in a temporary <command>dracut</command>
     emergency shell from the initrd environment. To make the configuration
     changes described below persistent, you need to perform them in the
     in the environment of the installed system.
    </para>
    <procedure>
     <step>
      <para>
       Identify what the system root (<filename>/</filename>) file system is.
       Inspect the content of the <filename>/proc/cmdline</filename> and
       look for the <option>root=</option> parameter.
      </para>
     </step>
     <step>
      <para>
       Verify whether the root file system is mounted:
      </para>
<screen>&prompt.sudo;systemctl status sysroot.mount</screen>
      <tip>
       <para>
        <command>dracut</command> mounts the root file system under
        <filename>/sysroot</filename> by default.
       </para>
      </tip>
      <para>
       From now on, let us assume that the root file system is mounted under
       <filename>/sysroot</filename>.
      </para>
     </step>
     <step>
      <para>
       Mount system-required file systems under <filename>/sysroot</filename>,
       <command>chroot</command> into it, then mount all file systems.
       For example:
      </para>
<screen>
&prompt.sudo;for x in proc sys dev run; do mount --bind /$x /sysroot/$x; done
&prompt.sudo;chroot /sysroot /bin/bash
&prompt.sudo;mount -a
</screen>
      <para>
       Refer to <xref linkend="sec-trouble-data-recover-rescue-access"/> for
       more details.
      </para>
     </step>
     <step>
      <para>
       Make changes to the multipath or dracut configuration as suggested
       in the procedures below. Remember to rebuild <filename>initrd</filename>
       to include the modifications.
      </para>
     </step>
     <step>
      <para>
       Exit the <command>chroot</command> environment by entering the
       <command>exit</command> command, then exit the emergency shell and
       reboot the server by pressing <keycombo><keycap function="control"/>
       <keycap>D</keycap></keycombo>.
      </para>
     </step>
    </procedure>

   <procedure xml:id="pro-multipath-trouble-root-blacklist">
    <title>Emergency Shell: Blacklist File Systems</title>
    <para>
     This fix is required if the root file system is not on multipath but
     multipath is enabled. In such a setup, multipath tries to set its paths
     for all devices that are not blacklisted. Since the device with the root
     file system is already mounted, it is inaccessible for multipath and
     causes it to fail. Fix this issue by configuring multipath correctly by
     blacklisting the root device in <filename>/etc/multipath.conf</filename>:
    </para>
    <step>
     <para>
      Run <command>multipath -v2</command> in the emergency shell and identify
      the device for the root file system. It will result in an output similar
      to:
     </para>
<screen>&prompt.root;multipath -v2
Dec 18 10:10:03 | 3600508b1001030343841423043300400: ignoring map</screen>
     <para>
      The string between <literal>| </literal> and <literal>:</literal> is the
      WWID needed for blacklisting.
     </para>
    </step>
    <step>
     <para>
      Open <filename>/etc/multipath.conf</filename> and add the following:
     </para>
<screen>blacklist {
  wwid "<replaceable>WWID</replaceable>"
}</screen>
     <para>
      Replace <replaceable>WWID</replaceable> with the ID you retrieved in the
      previous step. For more information see
      <xref linkend="sec-multipath-blacklist"/>.
     </para>
    </step>
    <step>
     <para>
      Rebuild the <systemitem>initrd</systemitem> using the following command:
     </para>
<screen>&prompt.user;dracut -f --add-multipath</screen>
    </step>
   </procedure>
   <procedure xml:id="pro-multipath-trouble-root-initrd">
    <title>Emergency Shell: Rebuild the <filename>initrd</filename></title>
    <para>
     This fix is required if the multipath status (enabled or disabled) differs
     between <filename>initrd</filename> and system. To fix this, rebuild the
     <filename>initrd</filename>:
    </para>
    <step>
     <para>
      If multipath has been <emphasis>enabled</emphasis> in the system, rebuild
      the initrd with multipath support with this command:
     </para>
<screen>&prompt.user;dracut --force --add multipath</screen>
     <para>
      In case Multipath has been <emphasis>disabled</emphasis> in the system,
      rebuild the initrd with Multipath support with this command:
     </para>
<screen>&prompt.user;dracut --force -o multipath</screen>
    </step>
   </procedure>
   <procedure xml:id="pro-multipath-trouble-root-drivers">
    <title>Emergency Shell: Rebuild the <filename>initrd</filename></title>
    <para>
     This fix is required if the initrd does not contain drivers to access
     network attached storage. This may, for example, be the case when the
     system was installed without multipath or when the respective hardware was
     added or replaced.
    </para>
    <step>
     <para>
      Add the required driver(s) to the variable <envar>force_drivers</envar>
      in the file <filename>/etc/dracut.conf.d/01-dist.conf</filename>. For
      example, if your system contains a RAID controller accessed by the
      <filename>hpsa</filename> driver and multipathed devices connected to a
      QLogic controller accessed by the driver qla23xx, this entry would look
      like:
     </para>
<screen>force_drivers+="hpsa qla23xx"</screen>
    </step>
    <step>
     <para>
      Rebuild the <systemitem>initrd</systemitem> using the following command:
     </para>
<screen>&prompt.user;dracut -f --add-multipath</screen>
    </step>
    <step>
     <para>
      To prevent the system from booting into emergency mode if attaching the
      network storage fails, it is recommended to add the mount option
      <literal>_netdev</literal> to the respective entries in
      <filename>/etc/fstab</filename>.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-multipath-trouble-prio-fail">
   <title>PRIO Settings for Individual Devices Fail After Upgrading to Multipath 0.4.9 or Later</title>
   <para>
    Multipath Tools from version 0.4.9 onward uses the <literal>prio</literal>
    setting in the <literal>defaults{}</literal> or
    <literal>devices{}</literal> section of the
    <filename>/etc/multipath.conf</filename> file. It silently ignores the
    keyword <literal>prio</literal> when it is specified for an individual
    <literal>multipath</literal> definition in the
    <literal>multipaths{)</literal> section.
   </para>
   <para>
    Multipath Tools 0.4.8 allowed the prio setting in the individual
    <literal>multipath</literal> definition in the
    <literal>multipaths{)</literal> section to override the
    <literal>prio</literal> settings in the <literal>defaults{}</literal> or
    <literal>devices{}</literal> section.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-trouble-prio-argument-fail">
   <title>PRIO Settings with Arguments Fail After Upgrading to multipath-tools-0.4.9 or Later</title>
   <para>
    When you upgrade from <filename>multipath-tools-0.4.8</filename> to
    <filename>multipath-tools-0.4.9</filename>, the <literal>prio</literal>
    settings in the <filename>/etc/multipath.conf</filename> file are broken
    for prioritizers that require an argument. In multipath-tools-0.4.9, the
    <literal>prio</literal> keyword is used to specify the prioritizer, and the
    <literal>prio_args</literal> keyword is used to specify the argument for
    prioritizers that require an argument. Previously, both the prioritizer and
    its argument were specified on the same <literal>prio</literal> line.
   </para>
   <para>
    For example, in multipath-tools-0.4.8, the following line was used to
    specify a prioritizer and its arguments on the same line.
   </para>
<screen>prio "weightedpath hbtl [1,3]:.:.+:.+ 260 [0,2]:.:.+:.+ 20"</screen>
   <para>
    After upgrading to multipath-tools-0.4.9 or later, the command causes an
    error. The message is similar to the following:
   </para>
<screen>&lt;Month day hh:mm:ss&gt; | Prioritizer 'weightedpath hbtl [1,3]:.:.+:.+ 260
[0,2]:.:.+:.+ 20' not found in /lib64/multipath</screen>
   <para>
    To resolve this problem, use a text editor to modify the
    <literal>prio</literal> line in the
    <filename>/etc/multipath.conf</filename> file. Create two lines with the
    prioritizer specified on the <filename>prio</filename> line, and the
    prioritizer argument specified on the <filename>prio_args</filename> line
    below it:
   </para>
<screen>prio "weightedpath"
prio_args "hbtl [1,3]:.:.+:.+ 260 [0,2]:.:.+:.+ 20"</screen>
   <para>
    Restart the <systemitem class="daemon">multipathd</systemitem> daemon for
    the changes to become active by running <command>sudo systemctl restart
    multipathd</command>.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-trouble-tids">
   <title>Technical Information Documents</title>
   <para>
    For information about troubleshooting multipath I/O issues on SUSE Linux
    Enterprise Server, see the following Technical Information Documents (TIDs)
    in the &suse; Knowledgebase:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <link xlink:href="https://www.suse.com/support/kb/doc.php?id=3617600"><citetitle>Using
      LVM on local and SAN attached devices</citetitle></link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://www.suse.com/support/kb/doc.php?id=7007498"><citetitle>Using
      LVM on Multipath (DM MPIO) Devices</citetitle></link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://www.suse.com/support/kb/doc.php?id=7009660"><citetitle>HOWTO:
      Add, Resize and Remove LUN without restarting SLES</citetitle></link>
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
</chapter>
