<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="containers_basics.xml" version="5.0" xml:id="cha-containers-basics">
 <title>Linux 容器简介</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker/>
        <dm:translation>是</dm:translation>
      </dm:docmanager>
    </info>
    <para>
  Linux 容器提供了轻量级虚拟化方法，可在单台主机上同时运行多个虚拟环境（容器）。这与 <xref linkend="gloss-vt-lxc-chroot"/> 环境类似。容器通过内核控制组 (<xref linkend="gloss-vt-lxc-cgroups"/>) 和内核名称空间进行隔离。
 </para>
 <para>
  容器提供操作系统级别的虚拟化，在此级别由内核控制隔离的容器。此方法与 Xen 或 KVM 等全虚拟化解决方案不同，在后者中，处理器将模拟整个硬件环境并控制虚拟机。
 </para>

 <para>
  从概念上讲，可将容器视为一种改进的 <xref linkend="gloss-vt-lxc-chroot"/> 技术。chroot 环境仅隔离文件系统，而容器可以通过 <xref linkend="gloss-vt-lxc-cgroups"/> 进一步提供资源管理和控制。
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <title>使用容器的优势</title>
  <listitem>
   <para>
    通过自包含的单元隔离应用程序。
   </para>
  </listitem>
  <listitem>
   <para>
    由于容器会实时管理资源分配，因此可提供接近本机的性能。
   </para>
  </listitem>
  <listitem>
   <para>
    通过 <xref linkend="gloss-vt-lxc-cgroups"/> 控制网络接口并在容器内部应用资源。
   </para>
  </listitem>
 </itemizedlist>
 <itemizedlist mark="bullet" spacing="normal">
  <title>容器的限制</title>
  <listitem>
   <para>
    容器在主机系统内核的内部运行，因此无法使用不同的内核或不同的内核版本。
   </para>
  </listitem>
  <listitem>
   <para>
    只有基于 Linux 的应用程序才可容器化。
   </para>
  </listitem>
  <listitem>
   <para>
    容器不安全，总体安全性取决于主机系统。可以通过 <phrase>AppArmor</phrase> 或 SELinux 配置文件保护容器化应用程序。
   </para>
  </listitem>
 </itemizedlist>
</chapter>
