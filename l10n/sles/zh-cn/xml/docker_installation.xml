<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="docker_installation.xml" xml:id="cha-docker-installation" xml:lang="zh-cn" version="5.0">
 <title>Docker Open Source Engine Installation</title>
 <sect1 xml:id="Preparation">
  <title>General Preparation</title>
  
  <para>
   Prepare the host as described below. Before installing any Docker-related
   packages, you need to enable the container module:
  </para>
  
  <note>
   
   <title>Built-in Docker Orchestration Support</title>
   <para>
    Starting with Docker Open Source Engine 1.12, container orchestration is now an integral
    part of Docker Open Source Engine. Even though this feature is available in
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>, it is not supported by SUSE and is only provided as a
    technology preview. Use Kubernetes for Docker container orchestration. For
    details, refer to the <link xlink:href="http://kubernetes.io/docs/getting-started-guides/kubeadm/">Kubernetes
     documentation</link>.
   </para>
  </note>
  
  
  
  <procedure>
   <title>Enabling the Container Module Using YaST</title>
   <step>
    
    <para>
     Start YaST, and select <menuchoice> <guimenu>Software</guimenu>
      <guimenu>Software Repositories</guimenu> </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Add</guimenu> to open the add-on dialog.
    </para>
   </step>
   <step>
    <para>
     Select <guimenu>Extensions and Modules from Registration Server</guimenu>
     and click <guimenu>Next</guimenu>.
    </para>
   </step>
   <step>
    <para>
     From the list of available extensions and modules, select
     <guimenu>Container Module 15 x86_64</guimenu> and click
     <guimenu>Next</guimenu>.
    </para>
    <para>
     The containers module and its repositories will be added to your system.
    </para>
   </step>
   <step>
    <para>
     If you use Repository Mirroring Tool, update the list of repositories on the RMT server.
    </para>
   </step>
  </procedure>
  
  <procedure>
   <title>Enabling the Container Module Using SUSEConnect</title>
   <step>
    <para>
     The Container Module can be added also with the following command:
    </para>
    <screen><prompt>tux &gt; </prompt><command>sudo</command> SUSEConnect -p sle-module-containers/15/x86_64 -r ''</screen>
    <note>
     <title>SUSEConnect Syntax</title>
     <para>
      The <option>-r ''</option> flag is required to avoid a known limitation
      of SUSEConnect.
     </para>
    </note>
   </step>
  </procedure>
  
  <procedure>
   <title>Installing and Setting Up Docker Open Source Engine</title>
   <step>
    <para>
     Install the <systemitem>docker</systemitem> package:
    </para>
    <screen><prompt>tux &gt; </prompt><command>sudo</command> zypper install docker</screen>
   </step>
   <step>
    <para>
     To automatically start the Docker service at boot time:
    </para>
    <screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl enable docker.service</screen>
    <para>
     This will also automatically enable <literal>docker.socket</literal>.
    </para>
   </step>
   <step>
    <para>
     In case you will use Portus and an SSL-secured registry, open the
     <filename>/etc/sysconfig/docker</filename> file. Search for the parameter
     <parameter>DOCKER_OPTS</parameter> and add <literal>--insecure-registry
      <replaceable>ADDRESS_OF_YOUR_REGISTRY</replaceable></literal>.
    </para>
   </step>
   <step>
    <para>
     In a production environment when using an SSL-secured registry with
     Portus, add your CA certificates to the directory
     <filename>/etc/docker/certs.d/<replaceable>REGISTRY_ADDRESS</replaceable></filename>
     and copy the CA certificates to your system:
    </para>
    <screen><prompt>tux &gt; </prompt><command>sudo</command> cp CA /etc/pki/trust/anchors/ &amp;&amp; update-ca-certificates</screen>
   </step>
   <step>
    <para>
     Start the Docker service:
    </para>
    <screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl start docker.service</screen>
    <para>
     This will automatically start <systemitem>docker.socket</systemitem>.
    </para>
   </step>
  </procedure>
  
  <para>
   The Docker daemon listens on a local socket which is accessible only by the
   <systemitem class="username">root</systemitem> user and by the members of
   the <systemitem class="groupname">docker</systemitem> group. The
   <systemitem class="groupname">docker</systemitem> group is automatically
   created at package installation time. To allow a certain user to connect to
   the local Docker daemon, use the following command:
  </para>
  <screen><prompt>tux &gt; </prompt><command>sudo</command> /usr/sbin/usermod -aG docker <replaceable>USERNAME</replaceable></screen>
  
  <para>
   After their next login, the user can communicate with the local
   Docker daemon.
  </para>
 </sect1>
 <sect1 xml:id="sec-docker-setup-net">
  <title>Networking</title>
  
  <para>
   If you want your containers to access the external network, you
   must enable the <option>ipv4 ip_forward</option> rule. This can be done
   using YaST by browsing to <menuchoice> <guimenu>System</guimenu>
    <guimenu>Network Settings</guimenu> <guimenu>Routing</guimenu> </menuchoice>
   menu and ensuring <option>Enable IPv4 Forwarding</option> is checked.
  </para>
  
  <para>
   This option cannot be changed when networking is handled by <literal>Network
    Manager</literal>. In such cases, you must configure <systemitem class="daemon">firewalld</systemitem> to enable
   IPv4 masquerading, either from the command line or using the graphical
   <command>firewalld-config</command> tool. By default, the
   <literal>external</literal> zone has masquerading enabled.
  </para>
  <para>
   You may add masquerading to any zone with <command>firewall-cmd</command>:
  </para>
 <screen><prompt>tux &gt; </prompt><command>sudo</command> firewall-cmd --zone=<replaceable>containers</replaceable> --add-masquerade</screen>
  <para>
   When you are satisfied that this is operating correctly, make it permanent:
  </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> firewall-cmd --runtime-to-permanent</screen>
  <para>
   In the <command>firewalld-config</command> interface, look for the 
   <guimenu>Masquerade</guimenu> tab to enable and disable masquerading.
  </para>
  <para>
   See Chapter 16 of the <citetitle>Security Guide</citetitle> for more information on <systemitem class="daemon">firewalld</systemitem>.
  </para>
  
  <sect2 xml:id="sec-docker-setup-net-power">
   <title>Networking Limitations on POWER Architecture</title>
   <para>
    Currently Docker networking has two limitations on the POWER architecture.
   </para>
   <para>
    The first limitation is about <command>iptables</command>. SLE machines
    cannot run Docker Open Source Engine with <command>iptables</command> support enabled. An
    update of the kernel will solve this issue. In the meantime, the
    <package>docker</package> package for POWER has
    <command>iptables</command> support disabled via a dedicated directive
    inside <filename>/etc/sysconfig/docker</filename>.
   </para>
   <para>
    Because of this limitation, Docker containers will not have access to
    the outer network. A possible workaround is to share the same network
    namespace between the host and the containers. This however reduces the
    isolation of the containers.
   </para>
   <para>
    The network namespace of the host can be shared on a per-container basis by
    adding <option>--net=host</option> to the <option>docker run</option>
    command.
   </para>
   <note>
    <title>iptables Support on <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase></title>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> hosts are not affected by this limitation but they may have
     <command>iptables</command> support disabled. This can be changed by
     removing the <option>-iptables=false</option> setting inside of
     <filename>/etc/sysconfig/docker</filename>.
    </para>
   </note>
   <para>
    The second limitation is about network isolation between the containers and
    the host. Currently it is not possible to prevent containers from probing
    or accessing arbitrary ports of each other.
   </para>
  </sect2>
  
  <sect2 xml:id="sec-docker-setup-net-docs">
   <title>How the Docker Open Source Engine Interacts with <command>iptables</command></title>
   <para>
    To learn more about how Docker containers interact with each other and the
    system firewall, refer to the <link xlink:href="https://docs.docker.com/v17.09/engine/userguide/networking/default_network/container-communication/">
     Docker documentation</link>.
   </para> 
   <para>
    It is also possible to completely prevent the Docker Open Source Engine from manipulating
    <command>iptables</command>. Refer to the <link xlink:href="https://docs.docker.com/network/iptables/#prevent-docker-from-manipulating-iptables">
     Docker documentation</link>.
   </para>
   
  </sect2>
  
 </sect1>
 
 <sect1 xml:id="sec-docker-setup-updates">
  <title>Updates</title>
  <para>
   All updates to the <package>docker</package> package are marked as
   interactive (that is, no automatic updates) to avoid accidental updates
   breaking running container workloads. In general, we recommend stopping all
   running containers before applying an update to Docker Open Source Engine.
  </para>
  <para>
   To avoid the potential for data loss, we do not recommend having workloads
   rely on containers being startable after an update to Docker Open Source Engine. Although it
   is technically possible to keep containers running during an update via the
   <option>--live-restore</option> option, experience has shown that such
   updates can introduce regressions. SUSE does not support this feature.
  </para>
 </sect1>
</chapter>
