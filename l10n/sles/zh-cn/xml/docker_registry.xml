<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="docker_registry.xml" xml:id="cha-registry-installation" xml:lang="zh-cn" version="5.0">
 <title>Storing Images</title>
 <para>
  Prior to creating your own images, you should decide where you will store the
  images. The easiest solution is to push these images to the
  <link xlink:href="https://hub.docker.com">Docker Hub</link>. By default, all
  images pushed to the Docker Hub are public. This is probably fine as long as this
  does not violate your company's policy and your images do not contain
  sensitive data or proprietary software.
 </para>
 <para>
  If you need to restrict access to your Docker images, there are two
  options:
 </para>
 <itemizedlist>
  <listitem>
   <para>

    Get a subscription on Docker Hub that unlocks the feature to create private
    repositories.
   </para>
  </listitem>
  <listitem>
   <para>
    Run an on-site Docker Registry where you can store all the Docker images used by
    your organization or company, combined with Portus to secure the registry.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  This chapter describes the second option: how to set up an on-site Docker Registry and
  how to combine it with Portus.
 </para>
 <sect1 xml:id="sec-docker-registry-definition">
  <title>What is Docker Registry?</title>

  <para>
   The Docker Registry is an open-source project created by Docker Inc. It allows the
   storage and retrieval of Docker images. By running a local instance of the
   Docker Registry it is possible to completely avoid usage of Docker Hub.
  </para>

  <para>
   Docker Registry is also used by Docker Hub. However, Docker Hub, as seen from the user
   perspective, is made of the following parts at least:
  </para>

  <variablelist>
   <varlistentry>
    <term>The user interface (UI)</term>
    <listitem>
     <para>
     The part that is accessed by users with their browser. The UI provides an
     easy way to browse the contents of Docker Hub either manually or using a search
     feature. It also allows the creation of organizations by different users.
    </para>
     <para>
     This component is closed-source.
    </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>The authentication component</term>
    <listitem>
     <para>
     This is used to protect the images stored inside of Docker Hub. It validates
     all push, pull, and search requests.
    </para>
     <para>
     This component is closed-source.
    </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>The storage back-end</term>
    <listitem>
     <para>
     This is where Docker images are sent and downloaded from. It is provided
     by Docker Registry.
    </para>
     <para>
     This component is open-source.
    </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 
 <sect1 xml:id="sec-docker-registry-installation">
  <title>Installing and Setting Up Docker Registry</title>
  <procedure>
   <step>
    <para>
     Install the <systemitem>docker-distribution-registry</systemitem> package.
     This package is in SUSE PackageHub. If you have not enabled PackageHub,
     run the following commands to enable it:
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> SUSEConnect --product PackageHub/15.1/x86_64
<prompt>tux &gt; </prompt><command>sudo</command> zypper refresh
</screen>
    <para>
     Then install <systemitem>docker-distribution-registry</systemitem>:
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> zypper install docker-distribution-registry</screen>
   </step>
   <step>
    <para>
     To automatically start the Docker Registry at boot time:
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl enable registry</screen>
   </step>
   <step>
    <para>
     Start the Docker Registry:
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl start registry</screen>
   </step>
  </procedure>

  <para>
   The Docker Registry configuration is defined inside of
   <filename>/etc/registry/config.yml</filename>.
  </para>

  <para>
   With the default configuration the registry listens on ports
   <literal>5000</literal> and stores the Docker images under
   <filename>/var/lib/docker-registry</filename>.
  </para>

  <note>
   <title>Incompatible Versions of Docker Open Source Engine and Docker Registry</title>
   <para>
    Docker Registry 2.3 is not compatible with Docker Open Source Engine versions older than 1.10, because
    v2 manifests were only introduced with Docker Open Source Engine 1.10. As Docker Open Source Engine and Docker Registry
    can be installed on different boxes, the versions might be incompatible. If
    you experience communication errors between Docker Open Source Engine and Docker Registry, update both
    to the latest versions.
   </para>
  </note>

  <para>
   For more details about Docker Registry and its configuration, see the official
   documentation at: <link xlink:href="https://docs.docker.com/registry/"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec-docker-registry-limitations">
  <title>Limitations</title>

  <para>
   The Docker Registry has two major limitations:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     It lacks any form of authentication. That means everybody with access to
     the Docker Registry can push and pull images to it. That also includes the
     possibility to overwrite already existing images.
    </para>
   </listitem>
   <listitem>
    <para>
     There is no way to see which images have been pushed to the Docker Registry. You
     need to manually take notes of what is being stored inside of it. There is
     also no search functionality, which makes collaboration harder. These
     limitations are resolved by installing Portus.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-docker-portus">
  <title>Portus</title>

  <para>
   Portus is an authentication service and user interface for the Docker Registry. It is
   an open source project created by SUSE to address all the limitations
   faced by the local instances of Docker Registry. By combining Portus and Docker Registry, it
   is possible to have a secure and enterprise ready on-premise version of the
   Docker Hub.
  </para>

  <para>
   Portus is available for SLES customers as a Docker image from SUSE
   Container Registry. For example, to pull the <literal>2.4.3</literal> tag,
   run the following command:
  </para>

<screen><prompt>tux &gt; </prompt><command>docker pull registry.suse.com/sles12/portus:2.4.3</command></screen>

  <para>
   Note that this pulls a SLES12-based image, and it is valid for SUSE Linux EnterpriseÂ 15
   systems (and any Docker environment).
  </para>

  <para>
   In addition to the official version of the Portus image from SUSE
   Container Registry, there is a community version that can be found on
   Docker Hub. However, as a SLES customer, we strongly suggest you use the
   official Portus image instead. The Portus image for SLES customers has the
   same code as the one from the community. Therefore, the setup instructions
   from <link xlink:href="http://port.us.org/docs/deploy.html"/> apply for both
   images.
  </para>
 </sect1>
</chapter>
