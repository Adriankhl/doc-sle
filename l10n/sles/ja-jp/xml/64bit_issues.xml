<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="64bit_issues.xml" version="5.0" xml:id="cha-64bit">
 <title>64ビットシステム環境での32ビットと64ビットのアプリケーション</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  <phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase>は<phrase os="sles">複数の</phrase>64ビットプラットフォームで利用できます。ただし、付属のすべてのアプリケーションが64ビットプラットフォームに移植されているわけではありません。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>は、64ビットシステム環境での32ビットアプリケーションの使用をサポートしています。この章では、このサポートを64ビットの<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>プラットフォームで実装する方法について簡潔に説明します。また、32ビットアプリケーションの実行方法、および32ビットと64ビットのシステム環境の両方で実行できるように32ビットアプリケーションをコンパイルする方法について説明します。さらに、カーネルAPIに関する情報、および32ビットアプリケーションを64ビットカーネルで実行する方法についても説明します。
 </para>
 <para>
  <phrase os="sles"><phrase role="productname"><phrase os="sles">64ビットプラットフォームのPOWER、IBM Z、およびAMD64/Intel 64に対応したSUSE Linux Enterprise Server</phrase></phrase></phrase>は、既存の32ビットアプリケーションが64ビット環境で<quote>出荷してすぐに</quote> <phrase os="sles">動作するように設計されています。対応する32ビットプラットフォームは、POWERではppc、AMD64/Intel 64ではx86になります。</phrase>このサポートにより、対応する 64ビット移植版が使用可能になるのを待たなくても、使用したい 32ビットアプリケーションを引き続き使用できます。<phrase os="sles">現在のPOWERシステムでは、大部分のアプリケーションが32ビットモードで実行されますが、64ビットアプリケーションを実行することもできます。</phrase>
 </para>
 <sect1 xml:id="sec-64bit-runt">
  <title>ランタイムサポート</title>

  <important>
   <title>アプリケーションバージョン間の競合</title>
   <para>
    アプリケーションが32ビットと64ビットの両方の環境で使用可能な場合に、両方のバージョンを同時にインストールすると問題が生じます。そのような場合は、2つのバージョンのどちらかだけをインストールして使用してください。
   </para>
   <para>
    PAM(プラグ可能認証モジュール)は、このルールの例外です。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>は、ユーザとアプリケーションを仲介するレイヤとしての認証プロセスでPAMを使用します。また、 32ビットアプリケーションも実行する64ビットオペレーティングシステムでは、常に両バージョンのPAMモジュールをインストールする必要があります。
   </para>
  </important>

  <para>
   正しく実行するために、すべてのアプリケーションにはライブラリが必要です。しかし残念ながら、32ビットバージョンと64ビットバージョンのライブラリの名前は同じです。そのため、ライブラリを別の方法で区別する必要があります。
  </para>

  <para>
   32ビットバージョンとの互換性を維持するために、ライブラリは32ビット環境の場合と同じシステム内の場所に格納されます。<filename>libc.so.6</filename>の32ビットバージョンは、32ビットと64ビットのどちらの環境でも<filename>/lib/libc.so.6</filename>の下にあります。
  </para>

  <para>
   64ビットのすべてのライブラリとオブジェクトファイルは、<filename>lib64</filename>というディレクトリにあります。通常、<filename>/lib</filename>および<filename>/usr/lib</filename>の下にある64ビットのオブジェクトファイルは、<filename>/lib64</filename>および<filename>/usr/lib64</filename>の下にあります。つまり、両方のバージョンのファイル名を変更しなくても済むように、32ビットライブラリ用の領域は<filename>/lib</filename>および<filename>/usr/lib</filename>の下になっています。
  </para>

  <para>
   ワードサイズに依存しないデータコンテンツを持つ、32ビットの<filename>/lib</filename>ディレクトリ中のサブディレクトリは移動されません。このスキームは、LSB (Linux Standards Base)とFHS (File System Hierarchy Standard)に準拠しています。
  </para>
 </sect1>
 <sect1 xml:id="sec-64bit-devel">
  <title>ソフトウェア開発</title>

  <para os="sles;osuse">
   すべての64ビットアーキテクチャで、64ビットオブジェクトの開発がサポートされています。32ビットコンパイル機能のサポートレベルは、アーキテクチャによって異なります。GCC(GNU Compiler Collection)やbinutilsのツールチェーンにはさまざまな実装オプションがあります。Binutilsには、アセンブラ<command>as</command>とリンカ<command>ld</command>が含まれています。
  </para>

  <para>
   32ビットオブジェクトと64ビットオブジェクトはどちらもbiarch開発ツールチェーンで生成できます。biarch開発ツールチェーンを使用して、32ビットと64ビットのオブジェクトを生成できます。ほぼすべてのプラットフォームにおいて、デフォルトでは64ビットオブジェクトのコンパイルが実行されます。32ビットオブジェクトは、特殊なフラグを使用すれば生成できます。この特殊なフラグは、GCCでは<option>-32</option>です。binutilsのフラグはアーキテクチャによって異なりますが、GCCは正しいフラグをリンカやアセンブラに転送します。現在では、amd64(x86とamd64の命令の開発をサポート)、IBM Z、およびPOWER用のbiarch開発ツールチェーンが存在します。通常、32ビットオブジェクトはPOWERプラットフォームで作成されます。<literal>-m64</literal>フラグは、64ビットオブジェクトの生成に使用する必要があります。
  </para>

  

  <para>
   すべてのヘッダファイルは、アーキテクチャに依存しない形式で作成する必要があります。インストール済みの32ビットと64ビットのライブラリには、インストール済みのヘッダファイルに対応するAPI (アプリケーションプログラミングインタフェース)が必要です。標準の<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>環境は、この原則に従って設計されています。ライブラリを手動で更新した場合は、各自でAPIの問題を解決してください。
  </para>
 </sect1>
 <sect1 xml:id="sec-64bit-biarch">
  <title>biarchプラットフォームでのソフトウェアのコンパイル</title>

  <para>
   biarchアーキテクチャで他のアーキテクチャ向けのバイナリを開発するには、対象のアーキテクチャのそれぞれのライブラリをさらにインストールする必要があります。こうしたパッケージは、対象のアーキテクチャが32ビットアーキテクチャである場合は<systemitem class="resource">rpmname-32bit</systemitem><phrase os="sles">または<systemitem class="resource">rpmname-x86</systemitem>と呼ばれ、対象のアーキテクチャが64ビットアーキテクチャである場合は<systemitem class="resource">rpmname-64bit</systemitem>と呼ばれます。</phrase>さらに、<systemitem class="resource">rpmname-devel</systemitem>パッケージからそれぞれのヘッダとライブラリ、また、<systemitem class="resource">rpmname-devel-32bit</systemitem><phrase os="sles">または<systemitem class="resource">rpmname-devel-64bit</systemitem></phrase>から対象のアーキテクチャ向けの開発ライブラリも必要です。
  </para>

  <para os="sles;osuse">
   たとえば、32ビットの2番目のアーキテクチャ(AMD64/Intel 64<phrase os="sles">またはIBM Z</phrase>)のシステムで<command>libaio</command>を使用するプログラムをコンパイルするには、次のRPMが必要です。
  </para>

  <variablelist os="sles;osuse">
   <varlistentry>
    <term>libaio-32bit</term>
    <listitem>
     <para>
      32ビットランタイムパッケージ
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>libaio-devel-32bit</term>
    <listitem>
     <para>
      32ビット開発用のヘッダとライブラリ
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>libaio</term>
    <listitem>
     <para>
      64ビットランタイムパッケージ
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>libaio-devel</term>
    <listitem>
     <para>
      64ビット開発用のヘッダとライブラリ
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   ほとんどのオープンソースプログラムでは、<command>autoconf</command>ベースのプログラム設定が使用されています。対象のアーキテクチャ向けプログラムの設定に<command>autoconf</command>を使用するには、<command>autoconf</command>の標準のコンパイラとリンカの設定に上書きするために、さらに環境変数を指定して<command>configure</command>スクリプトを実行します。
  </para>

  <para>
   次の例は、対象のアーキテクチャとしてx86を採用しているAMD64/Intel 64のシステムを示しています。<phrase os="sles">対象のアーキテクチャとしてppcを採用しているPOWERの場合も同様です。</phrase>
  </para>

  <procedure>
   <remark>taroth 2017-11-30: is this really a procedure?
   looks more like a reference to me...</remark>
   <step>
    <para>
     32ビットコンパイラを使用します。
    </para>
<screen>CC="gcc -m32"</screen>
   </step>
   <step>
    <para>
     リンカに 32ビットオブジェクトの処理を指示します(リンカのフロントエンドには常に<command>gcc</command>を使用)。
    </para>
<screen>LD="gcc -m32"</screen>
   </step>
   <step>
    <para>
     32ビットオブジェクトを生成するためにアセンブラを設定します。
    </para>
<screen>AS="gcc -c -m32"</screen>
   </step>
   <step>
    <para>
     次に示すような、32ビットライブラリの場所などのリンカフラグを指定します。
    </para>
<screen>LDFLAGS="-L/usr/lib"</screen>
   </step>
   <step>
    <para>
     32ビットオブジェクトコードライブラリの場所を指定します。
    </para>
<screen>--libdir=/usr/lib</screen>
   </step>
   <step>
    <para>
     32ビットXライブラリの場所を指定します。
    </para>
<screen>--x-libraries=/usr/lib</screen>
   </step>
  </procedure>

  <para>
   こうした変数のすべてがどのプログラムにも必要なわけではありません。それぞれのプログラムに合わせて使用してください。
  </para>

  <para>
   AMD64/Intel 64<phrase os="sles">、POWER、またはIBM Z</phrase>でネイティブの32ビットアプリケーションをコンパイルする場合の、<command>configure</command>コールの例を次に示します。
  </para>

<screen>CC="gcc -m32"
LDFLAGS="-L/usr/lib;"
./configure --prefix=/usr --libdir=/usr/lib --x-libraries=/usr/lib
make
make install</screen>
 </sect1>
 <sect1 xml:id="sec-64bit-kernel">
  <title>カーネル仕様</title>

  <para>
   AMD 64/Intel 64<phrase os="sles">、POWER、およびIBM Z</phrase>向けの64ビットカーネルには、64ビットと32ビットのカーネルABI(アプリケーションバイナリインタフェース)が用意されています。32ビットのカーネルABIは、該当する32ビットカーネルのABIと同じものです。つまり、32ビットアプリケーションが、32ビットカーネルの場合と同様に64ビットカーネルと通信できるということです。
  </para>

  <para>
   64ビットカーネルのシステムコールの32ビットエミュレーションでは、システムプログラムで使用されるすべてのAPIをサポートしていません。ただし、このサポートの有無はプラットフォームによって異なります。このため、<command>lspci</command>などのいくつかのアプリケーションは、正しく機能するよう、64ビットプログラムとして<phrase os="sles">非POWERプラットフォームでコンパイルする必要があります。IBM Zでは、32ビットカーネルABIで利用できないioctlsがあります。</phrase>
  </para>

  <para>
   64ビットカーネルでは、このカーネル用に特別にコンパイルされた64ビットカーネルモジュールしかロードできません。したがって、32ビットカーネルモジュールを使用することはできません。
  </para>

  <tip>
   <title>カーネルロード可能モジュール</title>
   <para>
    一部のアプリケーションには、カーネルでロード可能な個々のモジュールが必要です。64ビットシステム環境でそのような32ビットアプリケーションを使用する予定がある場合は、このアプリケーションおよびSUSEのプロバイダに問い合わせて、このモジュール向けのカーネルでロード可能な64ビットバージョンのモジュールと32ビットコンパイルバージョンのカーネルAPIを入手できるかを確認してください。
   </para>
  </tip>
 </sect1>
</chapter>
