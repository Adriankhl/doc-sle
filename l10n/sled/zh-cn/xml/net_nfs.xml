<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="net_nfs.xml" version="5.0" xml:id="cha-nfs">
 <title>Sharing File Systems with NFS</title>
 <info>
      <abstract>
        <para>
    The <emphasis>Network File System</emphasis> (<emphasis>NFS</emphasis>) is
    a protocol that allows access to files on a server in a manner similar to
    accessing local files.
   </para>
        <para>
    <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> installs NFS v4.2, which introduces support for sparse
    files, file pre-allocation, server-side clone and copy, application data
    block (ADB), and labeled NFS for mandatory access control (MAC) (requires
    MAC on both client and server).
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker/>
        <dm:translation>no</dm:translation>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec-nfs-overview">
  <title>Overview</title>
  <para>
   The <emphasis>Network File System</emphasis> (NFS) is a standardized,
   well-proven and widely supported network protocol that allows files to
   be shared between separate hosts.
  </para>
  <para>
   The <emphasis>Network Information Service</emphasis> (NIS) can be used
   to have a centralized user management in the network. Combining NFS
   and NIS allows using file and directory permissions for access control
   in the network. NFS with NIS makes a network transparent to the user.
  </para>
  <para>
   In the default configuration, NFS completely trusts the network and
   thus any machine that is connected to a trusted network. Any user
   with administrator privileges on any computer with physical access to
   any network the NFS server trusts can access any files that the server
   makes available.
  </para>
  <para>
   Often, this level of security is perfectly satisfactory, such
   as when the network that is trusted is truly private, often localized
   to a single cabinet or machine room, and no unauthorized access is
   possible. In other cases the need to trust a whole subnet as a unit
   is restrictive and there is a need for more fine-grained trust. To
   meet the need in these cases, NFS supports various security levels
   using the <emphasis>Kerberos</emphasis> infrastructure. Kerberos requires
   NFSv4, which is used by default. For details, see
   <xref linkend="cha-security-kerberos"/>.
  </para>

  <para>
   The following are terms used in the YaST module.
  </para>

  <variablelist>
   <varlistentry>
    <term>Exports</term>
    <listitem>
     <para>
      A directory <emphasis>exported</emphasis> by an NFS server, which clients
      can integrate into their systems.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>NFS Client</term>
    <listitem>
     <para>
      The NFS client is a system that uses NFS services from an NFS server over
      the Network File System protocol. The TCP/IP protocol is already
      integrated into the Linux kernel; there is no need to install any
      additional software.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>NFS Server</term>
    <listitem>
     <para>
      The NFS server provides NFS services to clients. A running server depends
      on the following daemons: <systemitem class="daemon">nfsd</systemitem>
      (worker), <systemitem class="daemon">idmapd</systemitem> (ID-to-name
      mapping for NFSv4, needed for certain scenarios only), <systemitem class="daemon">statd</systemitem> (file locking), and <systemitem class="daemon">mountd</systemitem> (mount requests).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>NFSv3</term>
    <listitem>
     <para>
      NFSv3 is the version 3 implementation, the <quote>old</quote> stateless
      NFS that supports client authentication.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>NFSv4</term>
    <listitem>
     <para>
      NFSv4 is the new version 4 implementation that supports secure user
      authentication via Kerberos. NFSv4 requires one single port only and thus
      is better suited for environments behind a firewall than NFSv3.
     </para>
     <para>
      The protocol is specified as
      <link xlink:href="http://tools.ietf.org/html/rfc3530"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>pNFS</term>
    <listitem>
     <para>
      Parallel NFS, a protocol extension of NFSv4. Any pNFS clients can
      directly access the data on an NFS server.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  
 </sect1>

 <sect1 os="sled" xml:id="sec-nfs-installation-sled">


  <title>Installing NFS Server</title>

  <para>
   For installing and configuring an NFS server, see the SUSE Linux Enterprise Server documentation.
  </para>
 </sect1>

 
 
 <sect1 xml:id="sec-nfs-configuring-nfs-clients">
  <title>Configuring Clients</title>

  <para>
   To configure your host as an NFS client, you do not need to install
   additional software. All needed packages are installed by default.
  </para>

  <sect2 xml:id="sec-nfs-import-yast2">
   <title>Importing File Systems with YaST</title>
   <para>
    Authorized users can mount NFS directories from an NFS server into the
    local file tree using the YaST NFS client module. Proceed as follows:
   </para>
   <procedure xml:id="pro-nfs-import-yast2">
    <title>Importing NFS Directories</title>
    <step>
     <para>
      Start the YaST NFS client module.
     </para>
    </step>

    <step>
     <para>
      Click <guimenu>Add</guimenu> in the <guimenu>NFS Shares</guimenu> tab.
      Enter the host name of the NFS server, the directory to import, and the
      mount point at which to mount this directory locally.
     </para>
    </step>


    <step>
     <para>
      When using NFSv4, select <guimenu>Enable NFSv4</guimenu> in the
      <guimenu>NFS Settings</guimenu> tab. Additionally, the <guimenu>NFSv4
      Domain Name</guimenu> must contain the same value as used by the NFSv4
      server. The default domain is <literal>localdomain</literal>.
     </para>
    </step>
    <step>
     <para>
      To use Kerberos authentication for NFS, GSS security must be enabled.
      Select <guimenu>Enable GSS Security</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enable <guimenu>Open Port in Firewall</guimenu> in the <guimenu>NFS
      Settings</guimenu> tab if you use a Firewall and want to allow access to
      the service from remote computers. The firewall status is displayed next
      to the check box.
     </para>
    </step>

    <step>
     <para>
      Click <guimenu>OK</guimenu> to save your changes.
     </para>
    </step>
   </procedure>
   <para>
    The configuration is written to <filename>/etc/fstab</filename> and the
    specified file systems are mounted. When you start the YaST configuration
    client at a later time, it also reads the existing configuration from this
    file.
   </para>
   <tip>
    <title>NFS as a Root File System</title>
    <para>
     On (diskless) systems, where the root partition is mounted via network as
     an NFS share, you need to be careful when configuring the network device
     with which the NFS share is accessible.
    </para>
    <para>
     When shutting down or rebooting the system, the default processing order
     is to turn off network connections, then unmount the root partition. With
     NFS root, this order causes problems as the root partition cannot be
     cleanly unmounted as the network connection to the NFS share is already
     not activated. To prevent the system from deactivating the relevant
     network device, open the network device configuration tab as described in
     <xref linkend="sec-network-yast-change-start"/> and choose <guimenu>On
     NFSroot</guimenu> in the <guimenu>Device Activation</guimenu> pane.
    </para>
   </tip>

  </sect2>

  <sect2 xml:id="sec-nfs-import">
   <title>Importing File Systems Manually</title>


   <para>
    The prerequisite for importing file systems manually from an NFS server is
    a running RPC port mapper. The <option>nfs</option> service takes care to
    start it properly; thus, start it by entering <command>systemctl start
    nfs</command> as <systemitem class="username">root</systemitem>. Then
    remote file systems can be mounted in the file system like local partitions
    using <command>mount</command>:
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> mount <replaceable>HOST</replaceable>:<replaceable>REMOTE-PATH</replaceable><replaceable>LOCAL-PATH</replaceable></screen>
   <para>
    To import user directories from the <systemitem>nfs.example.com</systemitem>
    machine, for example, use:
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> mount nfs.example.com:/home /home</screen>
   <sect3 xml:id="sec-nfs-automount">
    <title>Using the Automount Service</title>
    <para>
     The autofs daemon can be used to mount remote file systems automatically.
     Add the following entry to the <filename>/etc/auto.master</filename> file:
    </para>
<screen>/nfsmounts /etc/auto.nfs</screen>
    <para>
     Now the <filename>/nfsmounts</filename> directory acts as the root for all
     the NFS mounts on the client if the <filename>auto.nfs</filename> file is
     filled appropriately. The name <filename>auto.nfs</filename> is chosen for
     the sake of convenience—you can choose any name. In
     <filename>auto.nfs</filename> add entries for all the NFS mounts as
     follows:
    </para>
<screen>localdata -fstype=nfs server1:/data
nfs4mount -fstype=nfs4 server2:/</screen>
    <para>
     Activate the settings with <command>systemctl start autofs</command> as
     <systemitem class="username">root</systemitem>. In this example, <filename>/nfsmounts/localdata</filename>,
     the <filename>/data</filename> directory of
     <systemitem>server1</systemitem>, is mounted with NFS and
     <filename>/nfsmounts/nfs4mount</filename> from
     <systemitem>server2</systemitem> is mounted with NFSv4.
    </para>
    <para>
     If the <filename>/etc/auto.master</filename> file is edited while the
     service autofs is running, the automounter must be restarted for the
     changes to take effect with <command>systemctl restart autofs</command>.
    </para>
   </sect3>
   <sect3 xml:id="sec-nfs-fstab">
    <title>Manually Editing <filename>/etc/fstab</filename></title>
    <para>
     A typical NFSv3 mount entry in <filename>/etc/fstab</filename> looks like
     this:
    </para>
<screen>nfs.example.com:/data /local/path nfs rw,noauto 0 0</screen>
    <para>
     For NFSv4 mounts, use <literal>nfs4</literal> instead of
     <literal>nfs</literal> in the third column:
    </para>
<screen>nfs.example.com:/data /local/pathv4 nfs4 rw,noauto 0 0</screen>
    <para>
     The <literal>noauto</literal> option prevents the file system from being
     mounted automatically at start-up. If you want to mount the respective
     file system manually, it is possible to shorten the mount command
     specifying the mount point only:
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> mount /local/path</screen>
    <note>
     <title>Mounting at Start-Up</title>
     <para>
      If you do not enter the <literal>noauto</literal> option, the init
      scripts of the system will handle the mount of those file systems at
      start-up.
     </para>
    </note>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-nfs-pnfs">
   <title>Parallel NFS (pNFS)</title>
   <para>
    NFS is one of the oldest protocols, developed in the '80s. As such, NFS is
    usually sufficient if you want to share small files. However, when you want
    to transfer big files or many clients want to access data, an
    NFS server becomes a bottleneck and has a significant impact on the system
    performance. This is because of files quickly getting bigger, whereas the
    relative speed of your Ethernet has not fully kept up.
   </para>
   <para>
    When you request a file from a regular NFS server, the server
    looks up the file metadata, collects all the data and transfers it over the
    network to your client. However, the performance bottleneck becomes
    apparent no matter how small or big the files are:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      With small files most of the time is spent collecting the metadata.
     </para>
    </listitem>
    <listitem>
     <para>
      With big files most of the time is spent on transferring the data from
      server to client.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    pNFS, or parallel NFS, overcomes this limitation as it separates the file
    system metadata from the location of the data. As such, pNFS requires two
    types of servers:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      A <emphasis>metadata</emphasis> or <emphasis>control server</emphasis>
      that handles all the non-data traffic
     </para>
    </listitem>
    <listitem>
     <para>
      One or more <emphasis>storage server(s)</emphasis> that hold(s) the data
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The metadata and the storage servers form a single, logical NFS server.
    When a client wants to read or write, the metadata server tells the NFSv4
    client which storage server to use to access the file chunks. The client
    can access the data directly on the server.
   </para>
   <para>
    <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> supports pNFS on the client side only.
   </para>
   <sect3 xml:id="sec-nfs-pnfs-yast">
    <title>Configuring pNFS Client With YaST</title>
    <para>
     Proceed as described in <xref linkend="pro-nfs-import-yast2"/>, but click
     the <guimenu>pNFS (v4.2)</guimenu> check box and optionally <guimenu>NFSv4
     share</guimenu>. YaST will do all the necessary steps and will write all
     the required options in the file <filename>/etc/exports</filename>.
    </para>
   </sect3>
   <sect3 xml:id="sec-nfs-pnfs-manual">
    <title>Configuring pNFS Client Manually</title>
    <para>
     Refer to <xref linkend="sec-nfs-import"/> to start. Most of the
     configuration is done by the NFSv4 server. For pNFS, the only difference
     is to add the <option>minorversion</option> option and the metadata server
     <replaceable>MDS_SERVER</replaceable> to your <command>mount</command>
     command:
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> mount -t nfs4 -o minorversion=1 <replaceable>MDS_SERVER</replaceable> <replaceable>MOUNTPOINT</replaceable></screen>
    <para>
     To help with debugging, change the value in the <filename>/proc</filename>
     file system:
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> echo 32767 &gt; /proc/sys/sunrpc/nfsd_debug
<prompt>tux &gt; </prompt><command>sudo</command> echo 32767 &gt; /proc/sys/sunrpc/nfs_debug</screen>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-nfs-info">
  <title>For More Information</title>
  <para>
   In addition to the man pages of <command>exports</command>,
   <command>nfs</command>, and <command>mount</command>, information about
   configuring an NFS server and client is available in
   <filename>/usr/share/doc/packages/nfsidmap/README</filename>. For further
   documentation online refer to the following Web sites:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Find the detailed technical documentation online at
     <link xlink:href="http://nfs.sourceforge.net/">SourceForge</link>.
    </para>
   </listitem>
   <listitem>
    <para>
     For instructions for setting up kerberized NFS, refer to
     <link xlink:href="http://www.citi.umich.edu/projects/nfsv4/linux/krb5-setup.html">NFS
     Version 4 Open Source Reference Implementation</link>.
    </para>
   </listitem>
   <listitem>
    <para>
     If you have questions on NFSv4, refer to the
     <link xlink:href="http://www.citi.umich.edu/projects/nfsv4/linux/faq/">Linux
     NFSv4 FAQ</link>.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
