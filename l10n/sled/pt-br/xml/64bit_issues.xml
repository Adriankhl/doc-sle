<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="64bit_issues.xml" version="5.0" xml:id="cha-64bit">
 <title>Aplicativos de 32 bits e 64 bits em um ambiente de sistema de 64 bits</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes (sim)</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  O <phrase role="productname"><phrase os="sled">SUSE® Linux Enterprise Desktop</phrase></phrase> está disponível para plataformas de 64 bits. Isso não significa necessariamente que todos os aplicativos incluídos tenham sido transpostos para plataformas de 64 bits. O <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> suporta o uso de aplicativos de 32 bits em um ambiente de sistema de 64 bits. Este capítulo apresenta uma breve visão geral de como este suporte é implementado em plataformas de 64 bits do <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase>. Ele explica como os aplicativos de 32 bits são executados e devem ser compilados para que possam ser executados em ambientes de sistema de 32 bits e 64 bits. Além disso, você encontrará informações sobre a API do kernel e uma explicação sobre como os aplicativos de 32 bits podem ser executados em um kernel de 64 bits.
 </para>
 <para>
  O <phrase os="sled;osuse"><phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> para as plataformas de 64 bits amd64 e Intel 64</phrase> foi desenvolvido para que os aplicativos de 32 bits existentes sejam executados no ambiente de 64 bits <quote>do jeito que são, sem necessidade de mudança.</quote> Este suporte significa que você pode continuar a usar os aplicativos de 32 bits de sua preferência sem esperar que uma porta de 64 bits correspondente se torne disponível.
 </para>
 <sect1 xml:id="sec-64bit-runt">
  <title>Suporte ao tempo de execução</title>

  <important>
   <title>Conflitos entre versões de aplicativos</title>
   <para>
    Se um aplicativo estiver disponível para ambientes de 32 bits e de 64 bits, a instalação paralela das duas versões provavelmente resultará em problemas. Em tais casos, opte pela instalação e pelo uso de uma das duas versões.
   </para>
   <para>
    Uma exceção a essa regra é o PAM (módulo de autenticação conectável). O <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> usa o PAM no processo de autenticação como uma camada mediadora entre o usuário e o aplicativo. Em um sistema operacional de 64 bits que também executa aplicativos de 32 bits, é necessário sempre instalar as duas versões de um módulo PAM.
   </para>
  </important>

  <para>
   Para que os aplicativos sejam executados corretamente, cada um deles requer uma variedade de bibliotecas. Infelizmente, os nomes das versões de 32 bits e 64 bits das bibliotecas são idênticos. Eles devem ser diferenciados uns dos outros de outra forma.
  </para>

  <para>
   Para obter compatibilidade com a versão de 32 bits, as bibliotecas são armazenadas no mesmo local no sistema e no ambiente de 32 bits. A versão de 32 bits de <filename>libc.so.6</filename> está localizada em <filename>/lib/libc.so.6</filename> nos ambientes de 32 bits e 64 bits.
  </para>

  <para>
   Todos os arquivos de objetos e todas as bibliotecas de 64 bits estão localizados em diretórios denominados <filename>lib64</filename>. Os arquivos de objeto de 64 bits, que normalmente são encontrados em <filename>/lib</filename> e em <filename>/usr/lib</filename>, agora estão em <filename>/lib64</filename> e em <filename>/usr/lib64</filename>. Isso significa que há espaço para as bibliotecas de 32 bits em <filename>/lib</filename> e em <filename>/usr/lib</filename>, permitindo que o nome de arquivo de ambas as versões permaneça inalterado.
  </para>

  <para>
   Os subdiretórios dos diretórios <filename>/lib</filename> de 32 bits com conteúdo de dados que não depende do tamanho do texto não são movidos. Este esquema está em conformidade com a LSB (Linux Standards Base — Base de Padrões Linux) e com o FHS (File System Hierarchy Standard — Padrão de Hierarquia de Sistema de Arquivos).
  </para>
 </sect1>
 <sect1 xml:id="sec-64bit-devel">
  <title>Desenvolvimento de software</title>

  

  <para>
   É possível gerar objetos de 32 e 64 bits com uma cadeia de ferramentas de desenvolvimento biarch. Uma cadeia de ferramentas de desenvolvimento biarch permite a geração de objetos de 32 e 64 bits. A compilação de objetos de 64 bits é padrão em praticamente todas as plataformas. Os objetos de 32 bits poderão ser gerados se forem utilizados flags especiais. Este flag especial é o <option>-m32</option> para o GCC. Os flags para o binutils são dependentes de arquitetura, mas o GCC transfere os flags corretos para linkers e assemblers. Atualmente, existe uma cadeia de ferramentas de desenvolvimento biarch para amd64 (suporta desenvolvimento de instruções x86 e amd64), IBM Z e POWER. Os objetos de 32 bits normalmente são criados na plataforma POWER. O flag <literal>-m64</literal> deve ser usado para gerar objetos de 64 bits.
  </para>

  <para os="sled">
   Uma cadeia de ferramentas de desenvolvimento biarch permite a geração de objetos de 32 e 64 bits. O padrão é compilar objetos de 64 bits. É possível gerar objetos de 32 bits usando sinalizadores especiais. Para GCC, o sinalizador especial é <option>-m32</option>.
  </para>

  <para>
   Todos os arquivos de cabeçalho devem ser escritos em um formato independente de arquitetura. As bibliotecas de 32 bits e 64 bits instaladas devem ter uma API (application programming interface — interface de programação de aplicativo) que corresponda aos arquivos de cabeçalho instalados. O ambiente normal do <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> foi desenvolvido de acordo com este princípio. No caso de bibliotecas atualizadas manualmente, solucione esses problemas por conta própria.
  </para>
 </sect1>
 <sect1 xml:id="sec-64bit-biarch">
  <title>Compilação de software em plataformas biarch</title>

  <para>
   Para desenvolver binários para outra arquitetura em uma arquitetura biarch, as respectivas bibliotecas da segunda arquitetura devem ser instaladas adicionalmente. Esses pacotes são chamados de <systemitem class="resource">rpmname-32bit</systemitem>. Você também precisará dos respectivos cabeçalhos e bibliotecas dos pacotes <systemitem class="resource">rpmname-devel</systemitem> e das bibliotecas de desenvolvimento para a segunda arquitetura de <systemitem class="resource">rpmname-devel-32bit</systemitem>.
  </para>

  

  

  <para>
   A maioria dos programas de código-fonte aberto usa uma configuração de programa baseada em <command>autoconf</command>. Para usar o <command>autoconf</command> com o objetivo de configurar um programa para a segunda arquitetura, sobregrave as configurações do compilador normal e do linker de <command>autoconf</command> executando o script <command>configure</command> com variáveis de ambiente adicionais.
  </para>

  <para>
   O exemplo a seguir refere-se a um sistema AMD64/Intel 64 com x86 como segunda arquitetura. 
  </para>

  <procedure>
   <remark>taroth 2017-11-30: is this really a procedure?
   looks more like a reference to me...</remark>
   <step>
    <para>
     Use o compilador de 32 bits:
    </para>
<screen>CC="gcc -m32"</screen>
   </step>
   <step>
    <para>
     Instrua o linker a processar objetos de 32 bits (use sempre <command>gcc</command> como o front end do linker):
    </para>
<screen>LD="gcc -m32"</screen>
   </step>
   <step>
    <para>
     Defina o assembler para gerar objetos de 32 bits:
    </para>
<screen>AS="gcc -c -m32"</screen>
   </step>
   <step>
    <para>
      Especifique flags do linker, como o local das bibliotecas de 32 bits, por exemplo:
    </para>
<screen>LDFLAGS="-L/usr/lib"</screen>
   </step>
   <step>
    <para>
     Especifique o local das bibliotecas de código objeto de 32 bits:
    </para>
<screen>--libdir=/usr/lib</screen>
   </step>
   <step>
    <para>
     Especifique o local das bibliotecas X de 32 bits:
    </para>
<screen>--x-libraries=/usr/lib</screen>
   </step>
  </procedure>

  <para>
   Nem todas essas variáveis são necessárias para todos os programas. Adapte-as para o respectivo programa.
  </para>

  <para>
   Uma chamada <command>configure</command> de exemplo para compilar um aplicativo nativo de 32 bits em AMD64/Intel 64 pode ter o seguinte formato:
  </para>

<screen>CC="gcc -m32"
LDFLAGS="-L/usr/lib;"
./configure --prefix=/usr --libdir=/usr/lib --x-libraries=/usr/lib
make
make install</screen>
 </sect1>
 <sect1 xml:id="sec-64bit-kernel">
  <title>Especificações do kernel</title>

  <para>
   Os kernels de 64 bits para AMD64/Intel 64 oferecem uma ABI (application binary interface – interface binária de aplicativo) de kernel de 32 e 64 bits. A de 64 bits é idêntica à ABI do kernel de 32 bits correspondente. Isso significa que o aplicativo de 32 bits pode se comunicar com o kernel de 64 bits da mesma forma que com o kernel de 32 bits.
  </para>

  <para>
   A emulação de 32 bits de chamadas do sistema para um kernel de 64 bits não suporta todas as APIs usadas pelos programas do sistema. Isso depende da plataforma. Por essa razão, alguns aplicativos, como <command>lspci</command>, devem ser compilados.
  </para>

  <para>
   Um kernel de 64 bits só pode carregar módulos de kernel de 64 bits especificamente compilados para esse kernel. Não é possível usar módulos de kernel de 32 bits.
  </para>

  <tip>
   <title>Módulos carregáveis pelo Kernel</title>
   <para>
    Alguns aplicativos requerem módulos separados carregáveis pelo kernel. Se você pretende usar um aplicativo de 32 bits desse tipo em um ambiente de sistema de 64 bits, entre em contato com o provedor do aplicativo e do SUSE para verificar se a versão de 64 bits do módulo carregável pelo kernel e a versão compilada de 32 bits da API do kernel estão disponíveis para esse módulo.
   </para>
  </tip>
 </sect1>
</chapter>
