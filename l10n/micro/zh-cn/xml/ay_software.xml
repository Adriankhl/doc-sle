<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="ay_software.xml" version="5.0" xml:id="CreateProfile-Software">
  <title>Software</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

   <para>
    <remark role="fixme">Add a short description</remark>
   </para>

   

   <sect2 xml:id="Software-Selections-sles10">
    <title>Package selection with patterns and packages sections</title>
    <para>
     Patterns or packages are configured like this:
    </para>
    <example>
     <title>Package selection in the control file with patterns and packages sections</title>
<screen>&lt;software&gt;
  &lt;patterns config:type="list"&gt;
    &lt;pattern&gt;directory_server&lt;/pattern&gt;
  &lt;/patterns&gt;
  &lt;packages config:type="list"&gt;
    &lt;package&gt;apache&lt;/package&gt;
    &lt;package&gt;postfix&lt;/package&gt;
  &lt;/packages&gt;
  &lt;do_online_update config:type="boolean"&gt;true&lt;/do_online_update&gt;
&lt;/software&gt;</screen>
    </example>
    <note>
     <title>Package and pattern names</title>
     <para>
      The values are real package or pattern names. If the package name
      has been changed because of an upgrade, you will need to adapt these
      settings too.
     </para>
    </note>
    <para os="slemicro">
      The list bellow describes all patterns supported by SLE Micro. Unless specified otherwise, the patterns are optional.
    </para>
    <variablelist os="slemicro">
      <title>Pattern names</title>
      <varlistentry>
        <term><literal>microos-base</literal></term>
        <listitem>
          <para>a mandatory pattern</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>microos-container_runtime</literal></term>
        <listitem>
          <para>installs the runtime for containers (including Podman).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>microos-hardware</literal></term>
        <listitem>
          <para>a mandatory pattern</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>microos-selinux</literal></term>
        <listitem>
          <para>installs the SELinux packages</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>microos-cockpit</literal></term>
        <listitem>
          <para>installs the Web management tool - Cockpit</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>microos-sssd_ldap</literal></term>
        <listitem>
          <para>installs packages required to enable the LDAP client support using SSSD</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>microos-kvm_host</literal></term>
        <listitem>
          <para>installs packages to use SLE Micro as a KVM host</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>microos-fips</literal></term>
        <listitem>
          <para>installs FIPS 140-2 specific packages.</para>
        </listitem>
      </varlistentry>
    </variablelist>
   </sect2>

   

   <sect2 xml:id="Software-Selections-additional">
    <title>Installing additional/customized packages or products</title>
    <para>
     In addition to the packages available for installation on the DVD-ROMs,
     you can add external packages including customized kernels. Customized
     kernel packages must be compatible with the SUSE packages and must
     install the kernel files to the same locations.
    </para>
    <para>
     Unlike in earlier versions, you do not need a special resource in
     the control file to install custom and external packages. Instead you
     need to re-create the package database and update it with any new
     packages or new package versions in the source repository.
    </para>
    <para>
     A script is provided for this task which will query packages available
     in the repository and create the package database. Use the command
     <command>/usr/bin/create_package_descr</command>. It can be found in
     the <literal>inst-source-utils</literal> package in the openSUSE Build Service.
     When creating the database, all languages will be reset to English.
    </para>
    <example>
     <title>Creating a package database with the additional package inst-source-utils.rpm</title>
     <para>
     The unpacked DVD is located in <literal>/usr/local/DVDs/LATEST</literal>.
     </para>
<screen><prompt>&gt; </prompt>cp /tmp/inst-source-utils-2016.7.26-1.2.noarch.rpm /usr/local/DVDs/LATEST/suse/noarch
<prompt>&gt; </prompt>cd /usr/local/DVDs/LATEST/suse
<prompt>&gt; </prompt>create_package_descr -d /usr/local/CDs/LATEST/suse</screen>
    </example>
    <para>
     In the above example, the directory
     <filename>/usr/local/CDs/LATEST/suse</filename> contains the
     architecture-dependent (for example <literal>x86_64</literal>) and
     architecture-independent packages (<literal>noarch</literal>). This
     might look different on other architectures.
    </para>
    <para>
     The advantage of this method is that you can keep an up-to-date
     repository with a fixed and updated package. Additionally, this method
     makes the creation of custom CD-ROMs easier.
    </para>
    <para>
     To add your own module such as the SDK (SUSE Software Development Kit), add a file
     <filename>add_on_products.xml</filename> to the installation source in the
     root directory.
    </para>
    <para>
     The following example shows how the SDK module can be added to the base product
     repository. The complete SDK repository will be stored in the directory
     <filename>/sdk</filename>.
    </para>
    <example>
     <title><filename>add_on_products.xml</filename>
     </title>
     <para>This file describes an SDK module included in the base product.</para>
<screen>
&lt;?xml version="1.0"?&gt;
&lt;add_on_products xmlns="http://www.suse.com/1.0/yast2ns"
   xmlns:config="http://www.suse.com/1.0/configns"&gt;
   &lt;product_items config:type="list"&gt;
      &lt;product_item&gt;
         &lt;name&gt;SUSE Linux Enterprise Software Development Kit&lt;/name&gt;
         &lt;url&gt;relurl:////sdk?alias=SLE_SDK&lt;/url&gt;
         &lt;path&gt;/&lt;/path&gt;
         &lt;-- Users are asked whether to add such a product --&gt;
         &lt;ask_user config:type="boolean"&gt;false&lt;/ask_user&gt;
         &lt;-- Defines the default state of pre-selected state in case of ask_user used. --&gt;
         &lt;selected config:type="boolean"&gt;true&lt;/selected&gt;
      &lt;/product_item&gt;
   &lt;/product_items&gt;
&lt;/add_on_products&gt;
</screen>
    </example>
    
    <para>
     Besides this special case, all other modules, extensions and add-on
     products can be added from almost every other location during an AutoYaST
     installation.
    </para>
    
    <para>
      Even repositories that do not have any product or module information
      can be added during the installation. These are called <literal>other add-ons</literal>.
    </para>
    <remark>
     FIXME: The SLE SDK does not exist anymore, example below needs to be
     updated. - sknorr, 2020-07-02
    </remark>
    <example>
     <title>Adding the SDK extension and a user defined repository</title>
<screen>&lt;add-on&gt;
  &lt;add_on_products config:type="list"&gt;
    &lt;listentry&gt;
      &lt;media_url&gt;cd:///sdk&lt;/media_url&gt;
      &lt;product&gt;sle-sdk&lt;/product&gt;
      &lt;alias&gt;SLE SDK&lt;/alias&gt;
      &lt;product_dir&gt;/&lt;/product_dir&gt;
      &lt;priority config:type="integer"&gt;20&lt;/priority&gt;
      &lt;ask_on_error config:type="boolean"&gt;false&lt;/ask_on_error&gt;
      &lt;confirm_license config:type="boolean"&gt;false&lt;/confirm_license&gt;
      &lt;name&gt;SUSE Linux Enterprise Software Development Kit&lt;/name&gt;
    &lt;/listentry&gt;
  &lt;/add_on_products&gt;
  &lt;add_on_others config:type="list"&gt;
    &lt;listentry&gt;
      &lt;media_url&gt;https://download.opensuse.org/repositories/YaST:/Head/openSUSE_Leap_15.2/&lt;/media_url&gt;
      &lt;alias&gt;yast2_head&lt;/alias&gt;
      &lt;priority config:type="integer"&gt;30&lt;/priority&gt;
      &lt;name&gt;Latest YaST2 packages from OBS&lt;/name&gt;
    &lt;/listentry&gt;
  &lt;/add_on_others&gt;
&lt;/add-on&gt;</screen>
    </example>
    <para>
      The <literal>add_on_others</literal> and <literal>add_on_products</literal> sections support
      the same values:
    </para>

    <variablelist>
     <varlistentry>
      <term>media_url</term>
      <listitem>
       <para>
        Product URL. Can have the prefix <literal>cd:///</literal>,
        <literal>http://</literal>, <literal>ftp://</literal>, etc.
        This entry is mandatory.
       </para>
       <para>
        If you use a multi-product medium such as the SUSE Linux Enterprise Packages DVD,
        then the URL path should point to the root directory of the
        multi-product medium. The specific product directory is selected using
        the <literal>product_dir</literal> value (see below).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>product</term>
      <listitem>
       <para>
        Internal product name if the add-on is a product. The command
        <command>zypper products</command> shows the names of installed
        products.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>alias</term>
      <listitem>
       <para>
        Repository alias name. Defined by the user.
       </para>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term>product_dir</term>
      <listitem>
       <para>
        Optional subpath. This should only be used for multi-product media such
        as the SUSE Linux Enterprise Packages DVD.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>priority</term>
      <listitem>
       <para>
        Sets the repository libzypp priority. Priority of 1 is the highest.
        The higher the number, the lower the priority. Default is 99.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>ask_on_error</term>
      <listitem>
       <para>
        AutoYaST can ask the user to make add-on products, modules or extensions
        available instead of reporting a time-out error when no repository can
        be found at the given location. Set <literal>ask_on_error</literal> to
        <literal>true</literal> (the default is <literal>false</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>confirm_license</term>
      <listitem>
       <para>
        The user needs to confirm the license. Default is
        <literal>false</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>name</term>
      <listitem>
        <para>
         Repository name.
         The command <command>zypper lr</command> shows the names of added
         repositories.
        </para>
      </listitem>
     </varlistentry>
    </variablelist>

    <para>
     To use unsigned installation sources with AutoYaST, turn off
     the checks with the following configuration in your AutoYaST control
     file.
    </para>
    <note>
     <title>Unsigned installation sources—limitations</title>
     <para>
      You can only disable signature checking during the first stage of the
      auto-installation process. In stage two, the installed system's configuration
      takes precedence over AutoYaST configuration.</para>
    </note>
    <para>
     The elements listed below must be placed within the following XML
     structure:
    </para>
<screen>&lt;general&gt;
  &lt;signature-handling&gt;
    ...
  &lt;/signature-handling&gt;
&lt;/general&gt;</screen>
    <para>
     Default values for all options are <literal>false</literal>. If an
     option is set to <literal>false</literal> and a package or repository
     fails the respective test, it is silently ignored and will not be
     installed. Note that setting any of these options to
     <literal>true</literal> is a potential security risk. Never do it when
     using packages or repositories from third-party sources.
    </para>

    <variablelist>
     <varlistentry>
      <term>accept_unsigned_file</term>
      <listitem>
       <para>
        If set to <literal>true</literal>, AutoYaST will accept unsigned files such
        as the content file.
       </para>
<screen>&lt;accept_unsigned_file config:type="boolean" &gt;true&lt;/accept_unsigned_file&gt;</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>accept_file_without_checksum</term>
      <listitem>
       <para>
        If set to <literal>true</literal>, AutoYaST will accept files without a
        checksum in the content file.
       </para>
<screen>&lt;accept_file_without_checksum config:type="boolean" &gt;true&lt;/accept_file_without_checksum&gt;</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>accept_verification_failed</term>
      <listitem>
       <para>
        If set to <literal>true</literal>, AutoYaST will accept signed files even
        when the verification of the signature failed.
       </para>
<screen>&lt;accept_verification_failed config:type="boolean" &gt;true&lt;/accept_verification_failed&gt;</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>accept_unknown_gpg_key</term>
      <listitem>
       <para>
        If set to <literal>true</literal>, AutoYaST will accept new GPG keys of the
        installation sources, for example the key used to sign the content file.
       </para>
<screen>&lt;accept_unknown_gpg_key config:type="boolean" &gt;true&lt;/accept_unknown_gpg_key&gt;</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>accept_non_trusted_gpg_key</term>
      <listitem>
       <para>
        Set this option to <literal>true</literal> to accept known keys you
        have not yet trusted.
       </para>
<screen>&lt;accept_non_trusted_gpg_key config:type="boolean" &gt;true&lt;/accept_non_trusted_gpg_key&gt;</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>import_gpg_key</term>
      <listitem>
       <para>
        If set to <literal>true</literal>, AutoYaST will accept and import new GPG
        keys on the installation source in its database.
       </para>
<screen>&lt;import_gpg_key config:type="boolean" &gt;true&lt;/import_gpg_key&gt;</screen>
      </listitem>
     </varlistentry>

    </variablelist>

    <para>
     It is possible to configure the signature handling for each add-on
     product, module, or extension individually. The following elements must
     be between the <literal>signature-handling</literal> section of the
     individual add-on product, module, or extension. All settings are
     optional. If not configured, the global signature-handling from the
     <literal>general</literal> section is used.
    </para>

    <variablelist>
     <varlistentry>
      <term>accept_unsigned_file</term>
      <listitem>
       <para>
        If set to <literal>true</literal>, AutoYaST will accept unsigned files such
        as the content file for this add-on product.
       </para>
<screen>&lt;accept_unsigned_file config:type="boolean" &gt;true&lt;/accept_unsigned_file&gt;</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>accept_file_without_checksum</term>
      <listitem>
       <para>
        If set to <literal>true</literal>, AutoYaST will accept files without a
        checksum in the content file for this add-on.
       </para>
<screen>&lt;accept_file_without_checksum config:type="boolean" &gt;true&lt;/accept_file_without_checksum&gt;</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>accept_verification_failed</term>
      <listitem>
       <para>
        If set to <literal>true</literal>, AutoYaST will accept signed files even
        when the verification of the signature fails.
       </para>
<screen>&lt;accept_verification_failed config:type="boolean" &gt;true&lt;/accept_verification_failed&gt;</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>accept_unknown_gpg_key</term>
      <listitem>
       <para>
        If <literal>all</literal> is set to <literal>true</literal>, AutoYaST will
        accept new GPG keys on the installation source.
       </para>
<screen>&lt;accept_unknown_gpg_key&gt; &lt;all config:type="boolean"&gt;true&lt;/all&gt; &lt;/accept_unknown_gpg_key&gt;</screen>
       <para>
        Alternatively, you can define single keys:
       </para>
<screen>&lt;accept_unknown_gpg_key&gt; &lt;all config:type="boolean"&gt;false&lt;/all&gt; &lt;keys config:type="list"&gt; &lt;keyid&gt;3B3011B76B9D6523&lt;/keyid&gt; lt;/keys&gt; &lt;/accept_unknown_gpg_key&gt;</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>accept_non_trusted_gpg_key</term>
      <listitem>
       <para>
        This means that the key is known, but it is not trusted by you. You can
        trust all keys by adding:
       </para>
<screen>&lt;accept_non_trusted_gpg_key&gt; &lt;all config:type="boolean"&gt;true&lt;/all&gt; &lt;/accept_non_trusted_gpg_key&gt;</screen>
       <para>
        Alternatively, you can trust specific keys:
       </para>
<screen>&lt;accept_non_trusted_gpg_key&gt; &lt;all config:type="boolean"&gt;false&lt;/all&gt; &lt;keys config:type="list"&gt; &lt;keyid&gt;3B3011B76B9D6523&lt;/keyid&gt; &lt;/keys&gt; &lt;/accept_non_trusted_gpg_key&gt;</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>import_gpg_key</term>
      <listitem>
       <para>
        If <literal>all</literal> is set to <literal>true</literal>, AutoYaST will
        accept and import all new GPG keys on the installation source into its
        database.
       </para>
<screen>&lt;import_gpg_key&gt; &lt;all config:type="boolean"&gt;true&lt;/all&gt; &lt;/import_gpg_key&gt;</screen>
       <para>
        This can be done for specific keys only:
       </para>
<screen>&lt;import_gpg_key&gt; &lt;all config:type="boolean"&gt;false&lt;/all&gt; &lt;keys config:type="list"&gt; &lt;keyid&gt;3B3011B76B9D6523&lt;/keyid&gt; &lt;/keys&gt; &lt;/import_gpg_key&gt;</screen>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

   <sect2 xml:id="Software-Selections-kernel">
    <title>Kernel packages</title>
    <para>
     Kernel packages are not part of any selection. The required kernel is
     determined during installation. If the kernel package is added to any
     selection or to the individual package selection, installation will
     mostly fail because of conflicts.
    </para>
    <para>
     To force the installation of a specific kernel, use the
     <literal>kernel</literal> property. The following is an example of
     forcing the installation of the default kernel. This kernel will be
     installed even if an SMP or other kernel is required.
    </para>
    <example>
     <title>Kernel selection in the control file</title>
<screen>&lt;software&gt;
  &lt;kernel&gt;kernel-default&lt;/kernel&gt;
  ...
&lt;/software&gt;</screen>
    </example>
   </sect2>

   <sect2 xml:id="Software-Selections-remove-packs">
    <title>Removing automatically selected packages</title>
    <para>
     Some packages are selected automatically either because of a dependency
     or because it is available in a selection.
    </para>
    <para>
     Removing these packages might break the system consistency, and it is not
     recommended to remove basic packages unless a replacement which
     provides the same services is provided. The best example for this case
     are mail transfer agent (MTA) packages. By default,
     <systemitem>postfix</systemitem> will be selected and installed. To use another MTA like <systemitem>sendmail</systemitem>, then
     postfix can be removed from the list of selected package using a list
     in the software resource. However, note that sendmail is not shipped
     with <phrase role="productname"><phrase os="slemicro">SUSE Linux Enterprise Micro</phrase></phrase>. The following example shows how this can be
     done:
    </para>
    

    <note>
     <title>Package removal failure</title>
     <para>
      Note that it is not possible to remove a package that is part of a
      pattern (see <xref linkend="Software-Selections-sles10"/>).  When
      specifying such a package for removal, the installation will fail with
      the following error message:
     </para>
     <screen>The package resolver run failed. Check
      your software section in the AutoYaST profile.</screen>
    </note>

   </sect2>

   <sect2 xml:id="Software-Selections-recommend-packs">
    <title>Installing recommended packages and patterns</title>
    

  <itemizedlist>
   <listitem>
    <para>
      Install all recommended packages and patterns
    </para>
   </listitem>
   <listitem>
    <para>
      Install only required packages and patterns
    </para>
   </listitem>
   <listitem>
    <para>
      Install recommended packages, ignore recommended patterns
    </para>
   </listitem>
  </itemizedlist>

  <para>
    Set the <literal>install_recommended</literal> flag to
    <literal>true</literal> in the configuration file to install
    all recommended packages and patterns.
  </para>
  <para>
    If you want a minimal installation, and to install only
    <emphasis>required</emphasis> packages and patterns,
    set the flag to <literal>false</literal>.
  </para>
  <para>
    Omit the flag from the configuration file to install only recommended
    packages, and ignore all recommended patterns. Note that this flag only
    affects a fresh installation and will be ignored during an upgrade.
  </para>

    <para os="slemicro">
      By default, AutoYaST performs only the minimal installation with the required packages. If you want to install all recommended packages, add the following line to your AutoYaST profile:
    </para>
    <screen os="slemicro">
&lt;software&gt;
  &lt;install_recommended config:type="boolean"&gt;true
  &lt;/install_recommended&gt;
&lt;/software&gt;
    </screen>


   </sect2>

   

   

   
  </sect1>
